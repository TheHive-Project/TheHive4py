{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TheHive4py # TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template. Features # TheHive4py allows the following features: Authentication Using and API key Using a username/password pair Alerts Search for alerts Create alert Get alert Update alert Mark alert as Read Mark alert as Read Promote alert to case Delete alert Create case from many alert Merge alert into an existing case Run responder on an alert Cases Search for cases Get first case Create case Update case Delete case Get related cases Run responder on a case Tasks Search for tasks Create tasks Get task by id Update tasks Delete tasks Create task logs Get log by id List task logs by task id Search for task logs Download log attachment Run responder on a task Observables Search for observables of a case Get observable by Id Search for observables Create observables Update observables Delete observables Download observable archive Run analyzer on observable Run responder on an observable Administration Search for Case templates Get Case template by name Create Case templates Create custom fields Installation # On macOS and Linux, type: sudo pip install thehive4py or if you already installed it, update it by typing sudo pip install -U thehive4py If you are using Python on a Windows operating system, please forgo the sudo command. License # TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run. Updates # Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog . Contributing # We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing. Support # Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org . Community Discussions # We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one . Website # https://thehive-project.org/","title":"TheHive4py"},{"location":"#thehive4py","text":"TheHive4py is a Python API client for TheHive , a scalable 3-in-1 open source and free security incident response platform designed to make life easier for SOCs, CSIRTs, CERTs and any information security practitioner dealing with security incidents that need to be investigated and acted upon swiftly. TheHive4py allows analysts to send alerts to TheHive out of different sources. Those alerts can then be previewed and imported into cases using pre-defined templates. For example, a SOC may ask its constituency to send suspicious email reports to a specific mailbox that a script polls at regular intervals. When a new email is received, the script parses it then calls TheHive4py to create a corresponding alert in TheHive. Once the alert is raised, SOC analysts will get a notification thanks to TheHive's live stream so they can preview it and import it if deemed worth investigating using a specific template.","title":"TheHive4py"},{"location":"#features","text":"TheHive4py allows the following features: Authentication Using and API key Using a username/password pair Alerts Search for alerts Create alert Get alert Update alert Mark alert as Read Mark alert as Read Promote alert to case Delete alert Create case from many alert Merge alert into an existing case Run responder on an alert Cases Search for cases Get first case Create case Update case Delete case Get related cases Run responder on a case Tasks Search for tasks Create tasks Get task by id Update tasks Delete tasks Create task logs Get log by id List task logs by task id Search for task logs Download log attachment Run responder on a task Observables Search for observables of a case Get observable by Id Search for observables Create observables Update observables Delete observables Download observable archive Run analyzer on observable Run responder on an observable Administration Search for Case templates Get Case template by name Create Case templates Create custom fields","title":"Features"},{"location":"#installation","text":"On macOS and Linux, type: sudo pip install thehive4py or if you already installed it, update it by typing sudo pip install -U thehive4py If you are using Python on a Windows operating system, please forgo the sudo command.","title":"Installation"},{"location":"#license","text":"TheHive4py is an open source and free software released under the AGPL (Affero General Public License). We, TheHive Project, are committed to ensure that TheHive4py will remain a free and open source project on the long-run.","title":"License"},{"location":"#updates","text":"Information, news and updates are regularly posted on TheHive Project Twitter account and on the blog .","title":"Updates"},{"location":"#contributing","text":"We welcome your contributions. Please feel free to fork the code, play with it, make some patches and send us pull requests using issues . We do have a Code of conduct . Make sure to check it out before contributing.","title":"Contributing"},{"location":"#support","text":"Please open an issue on GitHub if you'd like to report a bug or request a feature. We are also available on Gitter to help you out. If you need to contact the project team, send an email to support@thehive-project.org .","title":"Support"},{"location":"#community-discussions","text":"We have set up a Google forum at https://groups.google.com/a/thehive-project.org/d/forum/users . To request access, you need a Google account. You may create one using a Gmail address or without one .","title":"Community Discussions"},{"location":"#website","text":"https://thehive-project.org/","title":"Website"},{"location":"changelog/","text":"Change Log # Unreleased # Full Changelog Fixed bugs: [BUG] Unable to create Alert #207 Closed issues: [Feature Request] Add alert artifact methods, for TheHive 4 only #208 1.8.0 (2020-11-27) # Full Changelog Fixed bugs: [Bug] With TheHive 4.0.1 thehive4py api.get_case_observables() fails #198 Error updating alert artifact #195 typo error on api.py line 658 #173 Documentation mismatch on function return #165 Fix exception handling for merge_alert_into_case #203 ( haam3r ) Issue #173: corrected typo 'custom_field.madatory' to 'custom_field.mandatory' #188 ( fwalloe ) Closed issues: Query ContainsString not working #193 [Bug] Cannot create Case Observable on TheHive4 despite manageObservable Permission #179 Querying for Cases that Contain Substring in Custom Field #128 FR: Download file from task log #112 Add attachment download support #204 Add method to merge an alert into a case #197 Add support to ignoreSimilarity attribute #194 Missing function delete_case_task #190 [Bug] Get_Case_Template broken in TheHive 4 #183 Add support to alert.externalLink attribute #169 Create enumerations for enumerated data #161 Add find_task_logs function #160 Add PAP field to alert #159 Add find_observables method #157 Allow passing in file-like objects to alert artifacts #136 Allow file observable creation from memory #35 Merged pull requests: Fixed typo in explanation part of some functions in query.py #199 ( fwalloe ) Get case observable function #206 ( jeffrey-e ) Add method to delete alert #202 ( haam3r ) Make get_task_logs() use 'api/case/task/log/_search/' #200 ( jnahorny ) Use dict key lookup instead of hasattr #196 ( Kamforka ) Implement case task deletion via patch request #191 ( gelim ) Add delete_case_observable method to api #189 ( p-tekh ) Added MISP export functionality #187 ( emalderson ) Adding externalLink to Alert model #181 ( milesflo ) Get alert with similarities #172 ( dainok ) Add find_observables #171 ( dainok ) Fix documentation mismatch on api.find_first TheHive-Project/TheHive4py#165 #166 ( haam3r ) Merge alert to case #164 ( haam3r ) Pass in file-like objects for case observables #135 ( jaredjennings ) 1.7.2 (2020-06-24) # Full Changelog Fixed bugs: Fix the constructor of TheHiveApi class #170 NameError: name 'requests' is not defined #163 Merged pull requests: Importing requests module #168 ( gaglimax ) 1.7.1 (2020-06-04) # Full Changelog Fixed bugs: Not able to create Case Observable #162 Merged pull requests: Add id for case template #140 ( golaso ) 1.7.0 (2020-05-29) # Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: FR: Allow specifying a custom date value for Alerts #151 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 support for case template deletion/creation #124 Example python create case with observables #113 Unable to create new case from existing case data #110 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Update_Case not updating Case Severity #100 Add support to multi tenancy #154 Add support to like and wildcard operators #149 Add ioc and sighted attributes to case and alert artifacts #126 Create update_case_observable #121 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar ) 1.6.0 (2018-12-17) # Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm ) 1.5.3 (2018-11-16) # Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93 1.5.2 (2018-11-12) # Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi ) 1.5.1 (2018-10-10) # Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy ) 1.5.0 (2018-09-25) # Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 ) 1.4.4 (2018-07-02) # Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: xsrf-token in theHive4py #76 Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 find_cases query on custom field (for template cases) #72 Unify the naming of statuses and filters #70 How can I automate case creation using email? #68 Searching For Cases #78 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin ) 1.4.3 (2018-02-07) # Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Closed issues: is there any method for create automatic alert when there's incoming email #65 Query for creating alert #56 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin ) 1.4.2 (2017-12-27) # Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Closed issues: Support several small functions in TheHive4py #47 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin ) 1.4.1 (2017-12-19) # Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin ) 1.4.0 (2017-12-05) # Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley ) 1.3.1 (2017-09-17) # Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38 1.3.0 (2017-09-15) # Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Case model is missing the required status attribute #29 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin ) 1.2.3 (2017-07-20) # Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 ) 1.2.2 (2017-07-06) # Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22 1.2.1 (2017-06-29) # Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow ) 1.2.0 (2017-05-12) # Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS ) 1.1.1 (2017-05-11) # Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14 1.1.0 (2017-03-23) # Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3 1.0.1 (2017-03-08) # Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8 1.0.0 (2017-03-08) # Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#unreleased","text":"Full Changelog Fixed bugs: [BUG] Unable to create Alert #207 Closed issues: [Feature Request] Add alert artifact methods, for TheHive 4 only #208","title":"Unreleased"},{"location":"changelog/#180-2020-11-27","text":"Full Changelog Fixed bugs: [Bug] With TheHive 4.0.1 thehive4py api.get_case_observables() fails #198 Error updating alert artifact #195 typo error on api.py line 658 #173 Documentation mismatch on function return #165 Fix exception handling for merge_alert_into_case #203 ( haam3r ) Issue #173: corrected typo 'custom_field.madatory' to 'custom_field.mandatory' #188 ( fwalloe ) Closed issues: Query ContainsString not working #193 [Bug] Cannot create Case Observable on TheHive4 despite manageObservable Permission #179 Querying for Cases that Contain Substring in Custom Field #128 FR: Download file from task log #112 Add attachment download support #204 Add method to merge an alert into a case #197 Add support to ignoreSimilarity attribute #194 Missing function delete_case_task #190 [Bug] Get_Case_Template broken in TheHive 4 #183 Add support to alert.externalLink attribute #169 Create enumerations for enumerated data #161 Add find_task_logs function #160 Add PAP field to alert #159 Add find_observables method #157 Allow passing in file-like objects to alert artifacts #136 Allow file observable creation from memory #35 Merged pull requests: Fixed typo in explanation part of some functions in query.py #199 ( fwalloe ) Get case observable function #206 ( jeffrey-e ) Add method to delete alert #202 ( haam3r ) Make get_task_logs() use 'api/case/task/log/_search/' #200 ( jnahorny ) Use dict key lookup instead of hasattr #196 ( Kamforka ) Implement case task deletion via patch request #191 ( gelim ) Add delete_case_observable method to api #189 ( p-tekh ) Added MISP export functionality #187 ( emalderson ) Adding externalLink to Alert model #181 ( milesflo ) Get alert with similarities #172 ( dainok ) Add find_observables #171 ( dainok ) Fix documentation mismatch on api.find_first TheHive-Project/TheHive4py#165 #166 ( haam3r ) Merge alert to case #164 ( haam3r ) Pass in file-like objects for case observables #135 ( jaredjennings )","title":"1.8.0 (2020-11-27)"},{"location":"changelog/#172-2020-06-24","text":"Full Changelog Fixed bugs: Fix the constructor of TheHiveApi class #170 NameError: name 'requests' is not defined #163 Merged pull requests: Importing requests module #168 ( gaglimax )","title":"1.7.2 (2020-06-24)"},{"location":"changelog/#171-2020-06-04","text":"Full Changelog Fixed bugs: Not able to create Case Observable #162 Merged pull requests: Add id for case template #140 ( golaso )","title":"1.7.1 (2020-06-04)"},{"location":"changelog/#170-2020-05-29","text":"Full Changelog Implemented enhancements: Add custom field support for new types #152 Return type is not correctly filled #150 Models Case and CaseTemplate don't have PAP attribute #127 Improve jsonify function to allow excluding attributes #125 Fixed bugs: Add support to datetime for \"date\" CustomFields #138 Update alert using 'fields' is not working #130 Models should have the attribute 'id' #120 promote_alert_to_case() doesn't apply caseTemplate #114 PAP flag missing when creating a case from a retrieved Case object #111 Specify an optional case template parameter to promote_alert_to_case #115 ( agix ) Closed issues: FR: Allow specifying a custom date value for Alerts #151 FR: Get \"task name\" in an \"case_task_log\" event #148 Create case with the hive 4 rc1 #144 Is TheHive4py still alive? #141 support for case template deletion/creation #124 Example python create case with observables #113 Unable to create new case from existing case data #110 Alert create error: ('Connection aborted.', error(104, 'Connection reset by peer') #109 Requesting analyzer report from cortex with thehive4py #107 Update_Case not updating Case Severity #100 Add support to multi tenancy #154 Add support to like and wildcard operators #149 Add ioc and sighted attributes to case and alert artifacts #126 Create update_case_observable #121 Merged pull requests: Add support for case delete, creating custom fields and create case templates #146 ( aurelienhess ) Support for json datetime #139 ( ehooo ) Added IDs in all models #123 ( mgabriel-silva ) Added update_case_observable #122 ( mgabriel-silva ) Added support for custom owner on Case creation #118 ( victorvillar )","title":"1.7.0 (2020-05-29)"},{"location":"changelog/#160-2018-12-17","text":"Full Changelog Merged pull requests: Implement some more functions #96 ( jojoob ) Create new sample bulk-alert-merge-to-case.py #95 ( david-burkett ) Update observable #94 ( joseluratm )","title":"1.6.0 (2018-12-17)"},{"location":"changelog/#153-2018-11-16","text":"Full Changelog Fixed bugs: Unable to close case as TruePositive WithImpact #93","title":"1.5.3 (2018-11-16)"},{"location":"changelog/#152-2018-11-12","text":"Full Changelog Fixed bugs: Support task-groups for tasks (e.g. creation of Cases) #91 Closed issues: Unknown attribute alert.customFields when creating alert in version 1.5.1 #88 Merged pull requests: support for task group names #92 ( crackytsi )","title":"1.5.2 (2018-11-12)"},{"location":"changelog/#151-2018-10-10","text":"Full Changelog Implemented enhancements: Add customFields to Alert #87 ( zpriddy )","title":"1.5.1 (2018-10-10)"},{"location":"changelog/#150-2018-09-25","text":"Full Changelog Closed issues: Update observable #7 Update task #6 Add a simple template search method #83 Max recursion depth exceeded error #82 Merged pull requests: Feature/promote alert to case #86 ( uplateandonline ) Feature/search templates #84 ( uplateandonline ) Prevent max recursion depth exceeded error #80 ( Psynbiotik ) added search support for tasks #79 ( neok0 )","title":"1.5.0 (2018-09-25)"},{"location":"changelog/#144-2018-07-02","text":"Full Changelog Fixed bugs: Missing parameter _field in Between function #71 ( tagashy ) Closed issues: xsrf-token in theHive4py #76 Retrieve analyzer report after analysis [question] #75 Keep analyzer reports when merging a case #73 find_cases query on custom field (for template cases) #72 Unify the naming of statuses and filters #70 How can I automate case creation using email? #68 Searching For Cases #78 Merged pull requests: Add support for alert markAsRead/Unread #74 ( itsnotapt ) Add Support for update_case_tasks method #63 ( billmurrin )","title":"1.4.4 (2018-07-02)"},{"location":"changelog/#143-2018-02-07","text":"Full Changelog Implemented enhancements: add update_alert to allow updating an alert #61 ( Rolinh ) Fixed bugs: How to close a case via API #67 CustomFields are not updated in update_case #66 Correction in update_case usage #57 Closed issues: is there any method for create automatic alert when there's incoming email #65 Query for creating alert #56 Merged pull requests: fix spelling of exception #58 ( billmurrin ) created get_linked_cases method in api #60 ( billmurrin )","title":"1.4.3 (2018-02-07)"},{"location":"changelog/#142-2017-12-27","text":"Full Changelog Implemented enhancements: Raise custom exceptions from api methods instead of calling sys.exit #55 Closed issues: Support several small functions in TheHive4py #47 Merged pull requests: Add Sighted Support to the Observable Model #54 ( billmurrin )","title":"1.4.2 (2017-12-27)"},{"location":"changelog/#141-2017-12-19","text":"Full Changelog Merged pull requests: fix get_case_observables method #53 ( billmurrin )","title":"1.4.1 (2017-12-19)"},{"location":"changelog/#140-2017-12-05","text":"Full Changelog Implemented enhancements: Provide just the template name when creating a case from a template #45 Add support of custom fields to the case model #39 Case helper #37 ( npratley ) Fixed bugs: Error updating case #51 Closed issues: Add a query builder capabilities #49 Run Cortex analyzer through api #40 Update case #5 Merged pull requests: Added missing attributes to the Case class. #50 ( npratley ) Added the functionality to run a Cortex analyzer on an observable #44 ( alexgoedeke ) Added get_task_logs method #42 ( billmurrin ) Added a method to update a case. #41 ( npratley )","title":"1.4.0 (2017-12-05)"},{"location":"changelog/#131-2017-09-17","text":"Full Changelog Fixed bugs: Basic auth doesn't work with version 1.3.0 #38","title":"1.3.1 (2017-09-17)"},{"location":"changelog/#130-2017-09-15","text":"Full Changelog Implemented enhancements: Allow specifying range to return > 10 cases, observables, etc., #30 fix two cases of bad indentation in exception handling code #26 ( Rolinh ) fix default severity level of an alert #25 ( Rolinh ) Fixed bugs: certificate verify option not included in create_case_task #27 Closed issues: Add an API method to create users #33 Feature Request - Task Log Template/Boilerplate Text #32 Case model is missing the required status attribute #29 Add support to authentication by API key #36 Add a find_alerts method to search for alerts #31 Merged pull requests: Added verify parameter to calls #28 ( billmurrin )","title":"1.3.0 (2017-09-15)"},{"location":"changelog/#123-2017-07-20","text":"Full Changelog Implemented enhancements: Adding option for an Internal CA #24 Merged pull requests: Find first #23 ( 3c7 )","title":"1.2.3 (2017-07-20)"},{"location":"changelog/#122-2017-07-06","text":"Full Changelog Fixed bugs: Remove print calls from TheHiveApi.find_cases method #22","title":"1.2.2 (2017-07-06)"},{"location":"changelog/#121-2017-06-29","text":"Full Changelog Fixed bugs: Fix the issue related to wrong base64 decoding when creating alerts #20 python-magic dependency not in setup.py #19 \"future\" dependency not documented in requirements.txt #18 Merged pull requests: Install python-magic package on setup #16 ( ilyaglow )","title":"1.2.1 (2017-06-29)"},{"location":"changelog/#120-2017-05-12","text":"Full Changelog Closed issues: Add the ability to create a TheHive alert #13 Merged pull requests: Added ability to find tasks by caseId #11 ( AverageS )","title":"1.2.0 (2017-05-12)"},{"location":"changelog/#111-2017-05-11","text":"Full Changelog Fixed bugs: Use basic auth when calling TheHive apis #14","title":"1.1.1 (2017-05-11)"},{"location":"changelog/#110-2017-03-23","text":"Full Changelog Implemented enhancements: Search for cases #4 Add observables to a case #3","title":"1.1.0 (2017-03-23)"},{"location":"changelog/#101-2017-03-08","text":"Full Changelog Fixed bugs: Issue creating a cases without metrics and without case template #8","title":"1.0.1 (2017-03-08)"},{"location":"changelog/#100-2017-03-08","text":"Closed issues: 2nd typo in setup.py #2 Typo in setup.py #1 * This Change Log was automatically generated by github_changelog_generator","title":"1.0.0 (2017-03-08)"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct # Our Pledge # In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards # Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities # Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct. Scope # This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement # Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution # This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior, in compliance with the licensing terms applying to the Project developments. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. However, these actions shall respect the licensing terms of the Project Developments that will always supersede such Code of Conduct.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at support@thehive-project.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4 This version includes a clarification to ensure that the code of conduct is in compliance with the free software licensing terms of the project.","title":"Attribution"},{"location":"reference/api/","text":"API # This is the reference of all the methods available on thehive4py.api.TheHiveApi . # TheHiveApi # __init__ ( self , url , principal , password = None , proxies = {}, cert = True , organisation = None , version = 3 ) special # Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True organisation str The name of the organisation against which api calls will be run. Defaults to None None version int The version of TheHive instance. Defaults to 3 3 Examples Basic Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full options Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , None , proxies , True , 'my-org' , version = Version . THEHIVE_3 . value ) Source code in thehive4py/api.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , url : str , principal : str , password = None , proxies = {}, cert = True , organisation = None , version = Version . THEHIVE_3 . value ): \"\"\" Python API client for TheHive. Arguments: url (str): URL of Thehive instance, including the port. Ex: `http://myserver:9000` principal (str): The API key, or the username if basic authentication is used. password (str): The password for basic authentication or None. Defaults to None proxies (dict): The proxy configuration, would have `http` and `https` attributes. Defaults to {} ```python proxies: { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } ``` cert (bool): Wether or not to enable SSL certificate validation organisation (str): The name of the organisation against which api calls will be run. Defaults to None version (int): The version of TheHive instance. Defaults to 3 ??? note \"Examples\" === \"Basic\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` === \"Full options\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', None, proxies, True, 'my-org', version=Version.THEHIVE_3.value ) ``` \"\"\" self . url = url self . principal = principal self . password = password self . proxies = proxies self . organisation = organisation if self . password is not None : self . auth = BasicAuth ( self . principal , self . password , self . organisation ) else : self . auth = BearerAuth ( self . principal , self . organisation ) self . cert = cert self . version = version # Create a CaseHelper instance self . case = CaseHelper ( self ) create_alert ( self , alert ) # Create an alert. Supports adding observables and custom fields Parameters: Name Type Description Default alert Alert Instance of [Alert][thehive4py.models.Alert] required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description AlertException An error occured during alert creation Source code in thehive4py/api.py 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 def create_alert ( self , alert ): \"\"\" Create an alert. Supports adding observables and custom fields Arguments: alert (Alert): Instance of [Alert][thehive4py.models.Alert] Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: AlertException: An error occured during alert creation \"\"\" req = self . url + \"/api/alert\" to_exclude = [ 'id' ] # Exclude PAP field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): to_exclude . append ( 'pap' ) to_exclude . append ( 'externalLink' ) data = alert . jsonify ( excludes = to_exclude ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert create error: {} \" . format ( e )) create_alert_artifact ( self , alert_id , alert_artifact ) # Create an alert artifact Parameters: Name Type Description Default alert_id str Alert identifier required alert_artifact AlertArtifact Instance of [AlertArtifact][thehive4py.models.AlertArtifact] required Returns: Type Description response (requests.Response) Response object including a JSON description of an alert artifact Exceptions: Type Description AlertArtifactException An error occured during alert artifact creation Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 def create_alert_artifact ( self , alert_id , alert_artifact ): \"\"\" Create an alert artifact Arguments: alert_id (str): Alert identifier alert_artifact (AlertArtifact): Instance of [AlertArtifact][thehive4py.models.AlertArtifact] Returns: response (requests.Response): Response object including a JSON description of an alert artifact Raises: AlertArtifactException: An error occured during alert artifact creation !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/ {} /artifact\" . format ( alert_id ) if alert_artifact . dataType == 'file' : try : fields = [ \"dataType\" , \"message\" , \"tlp\" , \"tags\" , \"ioc\" , \"sighted\" , \"ignoreSimilarity\" ] data = { k : v for k , v in alert_artifact . __dict__ . items () if k in fields } data = { \"_json\" : json . dumps ( data )} return requests . post ( req , data = data , files = alert_artifact . data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact create error: {} \" . format ( e )) else : try : data = alert_artifact . jsonify ( excludes = [ 'id' ]) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact create error: {} \" . format ( e )) create_case ( self , case ) # Create a case Parameters: Name Type Description Default case Case Instance of [Case][thehive4py.models.Case] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def create_case ( self , case ): \"\"\" Create a case Arguments: case (Case): Instance of [Case][thehive4py.models.Case] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case\" data = case . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case create error: {} \" . format ( e )) create_case_observable ( self , case_id , case_observable ) # Create a case observable Parameters: Name Type Description Default case_id str Case identifier required case_observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def create_case_observable ( self , case_id , case_observable ): \"\"\" Create a case observable Arguments: case_id (str): Case identifier case_observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/ {} /artifact\" . format ( case_id ) if case_observable . dataType == 'file' : try : data = { \"dataType\" : case_observable . dataType , \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted , \"ignoreSimilarity\" : case_observable . ignoreSimilarity } # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'ignoreSimilarity' , None ) data = { \"_json\" : json . dumps ( data )} return requests . post ( req , data = data , files = case_observable . data [ 0 ], proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) else : try : to_exclude = [ 'id' ] # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): to_exclude . append ( 'ignoreSimilarity' ) data = case_observable . jsonify ( excludes = to_exclude ) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) create_case_task ( self , case_id , case_task ) # Create a case task Parameters: Name Type Description Default case_id Case identifier required case_task Instance of [CaseTask][thehive4py.models.CaseTask] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 def create_case_task ( self , case_id , case_task ): \"\"\" Create a case task Arguments: case_id: Case identifier case_task: Instance of [CaseTask][thehive4py.models.CaseTask] Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/ {} /task\" . format ( case_id ) data = case_task . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task create error: {} \" . format ( e )) create_case_template ( self , case_template ) # Create a case template Parameters: Name Type Description Default case_template CaseTemplate Instance of [CaseTemplate][thehive4py.models.CaseTemplate] required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CaseTemplateException An error occured during case template creation Source code in thehive4py/api.py 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 def create_case_template ( self , case_template ): \"\"\" Create a case template Arguments: case_template (CaseTemplate): Instance of [CaseTemplate][thehive4py.models.CaseTemplate] Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CaseTemplateException: An error occured during case template creation \"\"\" req = self . url + \"/api/case/template\" data = case_template . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template create error: {} \" . format ( e )) create_custom_field ( self , custom_field ) # Create a custom field Parameters: Name Type Description Default custom_field CustomField Instance of [CustomField][thehive4py.models.CustomField] required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CustomFieldException Custom field already exists CustomFieldException An error occured during custom field creation Warning This function is available only for TheHive 3 Source code in thehive4py/api.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 def create_custom_field ( self , custom_field ): \"\"\" Create a custom field Arguments: custom_field (CustomField): Instance of [CustomField][thehive4py.models.CustomField] Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CustomFieldException: Custom field already exists CustomFieldException: An error occured during custom field creation !!! Warning This function is available only for TheHive 3 \"\"\" if self . _check_if_custom_field_exists ( custom_field ): raise CustomFieldException ( 'Field with reference \" {} \" already exists' . format ( custom_field . reference )) data = { \"value\" : { \"name\" : custom_field . name , \"reference\" : custom_field . reference , \"description\" : custom_field . description , \"type\" : custom_field . type , \"options\" : custom_field . options , \"mandatory\" : custom_field . mandatory } } req = self . url + \"/api/list/custom_fields\" try : return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CustomFieldException ( \"Custom field create error: {} \" . format ( e )) create_task_log ( self , task_id , case_task_log ) # Create a task log either with an attachement or just with a log message. Parameters: Name Type Description Default task_id str Task identifier required case_task_log CaseTaskLocg Instance of [CaseTaskLog][thehive4py.models.CaseTaskLog] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def create_task_log ( self , task_id , case_task_log ): \"\"\" Create a task log either with an attachement or just with a log message. Arguments: task_id (str): Task identifier case_task_log (CaseTaskLocg): Instance of [CaseTaskLog][thehive4py.models.CaseTaskLog] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) data = { '_json' : json . dumps ({ \"message\" : case_task_log . message })} if case_task_log . file : f = case_task_log . attachment try : return requests . post ( req , data = data , files = f , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = json . dumps ({ 'message' : case_task_log . message }), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) delete_alert ( self , alert_id ) # Deletes a TheHive alert. Parameters: Name Type Description Default alert_id str Id of the alert to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description AlertException An error occured during alert deletion Warning TheHive 3: Deleting alert requires admin role TheHive 4: Deleting alert requires a role including manageAlert permissing Source code in thehive4py/api.py 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 def delete_alert ( self , alert_id ): \"\"\" Deletes a TheHive alert. Arguments: alert_id (str): Id of the alert to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: AlertException: An error occured during alert deletion !!! Warning TheHive 3: Deleting alert requires `admin` role TheHive 4: Deleting alert requires a role including `manageAlert` permissing \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) params = { \"force\" : 1 } try : return requests . delete ( req , params = params , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert deletion error: {} \" . format ( e )) delete_alert_artifact ( self , artifact_id ) # Deletes a TheHive alert artifact. Parameters: Name Type Description Default artifact_id str Id of the artifact to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description AlertArtifactException An error occured during alert artifact deletion Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 def delete_alert_artifact ( self , artifact_id ): \"\"\" Deletes a TheHive alert artifact. Arguments: artifact_id (str): Id of the artifact to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: AlertArtifactException: An error occured during alert artifact deletion !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/artifact/ {} \" . format ( artifact_id ) try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact deletion error: {} \" . format ( e )) delete_case ( self , case_id , force = False ) # Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Parameters: Name Type Description Default case_id str Id of the case to delete required force bool True to physically delete the case, False to mark the case as deleted False Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 def delete_case ( self , case_id , force = False ): \"\"\" Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Arguments: case_id (str): Id of the case to delete force (bool): True to physically delete the case, False to mark the case as deleted Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) if force : req += '/force' try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case deletion error: {} \" . format ( e )) delete_case_observable ( self , observable_id ) # Deletes a TheHive case observable. Parameters: Name Type Description Default observable_id str Id of the observable to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseObservableException An error occured during case observable deletion Source code in thehive4py/api.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 def delete_case_observable ( self , observable_id ): \"\"\" Deletes a TheHive case observable. Arguments: observable_id (str): Id of the observable to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseObservableException: An error occured during case observable deletion \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable deletion error: {} \" . format ( e )) delete_case_task ( self , task_id ) # Deletes a TheHive case task. Parameters: Name Type Description Default task_id str Id of the task to delete required Returns: Type Description response (requests.Response) Response object including the updated task Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def delete_case_task ( self , task_id ): \"\"\" Deletes a TheHive case task. Arguments: task_id (str): Id of the task to delete Returns: response (requests.Response): Response object including the updated task Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = { 'status' : 'Cancel' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task deletion error: {} \" . format ( e )) download_attachment ( self , attachment_id , filename = 'attachment' , archive = False ) # Get the content of an attachement object by ID Parameters: Name Type Description Default attachment_id identifier of the attachment object required filename str name of the downloaded file 'attachment' archive bool set to True to zip and password protect the downloaded file False Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 def download_attachment ( self , attachment_id , filename = \"attachment\" , archive = False ): \"\"\" Get the content of an attachement object by ID Arguments: attachment_id: identifier of the attachment object filename (str): name of the downloaded file archive (bool): set to `True` to zip and password protect the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: TheHiveException: An error occured during the attachment download \"\"\" if archive is True : req = self . url + \"/api/datastorezip/ {} ?name {} \" . format ( attachment_id , filename ) else : req = self . url + \"/api/datastore/ {} ?name= {} \" . format ( attachment_id , filename ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving attachment {} : {} \" . format ( attachment_id , e )) download_observable_attachment ( self , observable_id , archive = True ) # Get the content of the attachement object of a file observable Parameters: Name Type Description Default observable_id identifier of the case observable object required archive bool set to False to disable zip and password protection of the downloaded file True Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description CaseObservableException If the observable is not a file TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 def download_observable_attachment ( self , observable_id , archive = True ): \"\"\" Get the content of the attachement object of a file observable Arguments: observable_id: identifier of the case observable object archive (bool): set to `False` to disable zip and password protection of the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: CaseObservableException: If the observable is not a file TheHiveException: An error occured during the attachment download \"\"\" try : # Get the observable by id response = self . get_case_observable ( observable_id ) # Check if it has an attachment observable = response . json () if 'attachment' in observable : attachment = observable [ 'attachment' ] return self . download_attachment ( attachment [ 'id' ], filename = attachment [ 'name' ], archive = True ) else : raise CaseObservableException ( \"Observable {} doesn't have an attachment\" . format ( observable_id )) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Error on retrieving attachment of case observable {} : {} \" . format ( observable_id , e )) download_task_log_attachment ( self , task_log_id , archive = False ) # Get the content of the attachement object of a task log Parameters: Name Type Description Default task_log_id identifier of the task log object required archive bool set to True to zip and password protect the downloaded file False Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description CaseTaskLogException If the task log doesn't have an attachment TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 def download_task_log_attachment ( self , task_log_id , archive = False ): \"\"\" Get the content of the attachement object of a task log Arguments: task_log_id: identifier of the task log object archive (bool): set to `True` to zip and password protect the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: CaseTaskLogException: If the task log doesn't have an attachment TheHiveException: An error occured during the attachment download \"\"\" try : # Get the task log by id response = self . get_task_log ( task_log_id ) # Check if it has an attachment if self . __isVersion ( Version . THEHIVE_3 . value ): log = response . json () else : log = response . json ()[ 0 ] if 'attachment' in log : attachment = log [ 'attachment' ] return self . download_attachment ( attachment [ 'id' ], filename = attachment [ 'name' ], archive = archive ) else : raise CaseTaskLogException ( \"Task log {} doesn't have an attachment\" . format ( task_log_id )) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Error on retrieving attachment of task log {} : {} \" . format ( task_log_id , e )) export_to_misp ( self , misp_id , case_id ) # Export selected IOCs of a case as an event to a MISP instance This function triggers the same action triggered when the \"Share\" button on the TheHive GUI is clicked Parameters: Name Type Description Default misp_id identifier of the MISP server required case_id str Id of the case required Returns: Type Description response (requests.Response) Response object including a JSON representation of the exported event Exceptions: Type Description TheHiveException An error occured during the export operation Source code in thehive4py/api.py 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 def export_to_misp ( self , misp_id , case_id ): \"\"\" Export selected IOCs of a case as an event to a MISP instance This function triggers the same action triggered when the \"Share\" button on the TheHive GUI is clicked Arguments: misp_id: identifier of the MISP server case_id (str): Id of the case Returns: response (requests.Response): Response object including a JSON representation of the exported event Raises: TheHiveException: An error occured during the export operation \"\"\" req = self . url + \"/api/connector/misp/export/ {0} / {1} \" . format ( case_id , misp_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , json = {}, auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"MISP export error: {} \" . format ( e )) find_alerts ( self , ** attributes ) # Find alerts using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of alerts. Exceptions: Type Description AlertException An error occured during alert search Source code in thehive4py/api.py 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 def find_alerts ( self , ** attributes ): \"\"\" Find alerts using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of alerts. Raises: AlertException: An error occured during alert search \"\"\" return self . __find_rows ( \"/api/alert/_search\" , ** attributes ) find_case_templates ( self , ** attributes ) # Find case templates using a query, sort and pagination Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case templates Exceptions: Type Description TheHiveException An error occured during case template search Source code in thehive4py/api.py 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 def find_case_templates ( self , ** attributes ): \"\"\" Find case templates using a query, sort and pagination Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case templates Raises: TheHiveException: An error occured during case template search \"\"\" return self . __find_rows ( \"/api/case/template/_search\" , ** attributes ) find_cases ( self , ** attributes ) # Find cases using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of cases. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 def find_cases ( self , ** attributes ): \"\"\" Find cases using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of cases. Raises: CaseException: An error occured during case search \"\"\" return self . __find_rows ( \"/api/case/_search\" , ** attributes ) find_first ( self , ** attributes ) # Find cases and return just the first record Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required Returns: Type Description response (dict) A dict object describing the first case resulting from the query and sort options. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 def find_first ( self , ** attributes ): \"\"\" Find cases and return just the first record Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order Returns: response (dict): A dict object describing the first case resulting from the query and sort options. Raises: CaseException: An error occured during case search \"\"\" attributes [ 'range' ] = '0-1' try : return self . find_cases ( ** attributes ) . json ()[ 0 ] except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case search error: {} \" . format ( e )) find_observables ( self , ** attributes ) # Find observables using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of observables. Exceptions: Type Description ObservableException An error occured during observable search Source code in thehive4py/api.py 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 def find_observables ( self , ** attributes ): \"\"\" Find observables using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of observables. Raises: ObservableException: An error occured during observable search \"\"\" return self . __find_rows ( \"/api/case/artifact/_search\" , ** attributes ) find_task_logs ( self , ** attributes ) # Find task logs using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description CaseTaskException An error occured during case task log search Source code in thehive4py/api.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 def find_task_logs ( self , ** attributes ): \"\"\" Find task logs using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: CaseTaskException: An error occured during case task log search \"\"\" return self . __find_rows ( \"/api/case/task/log/_search\" , ** attributes ) find_tasks ( self , ** attributes ) # Find case tasks using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case tasks. Exceptions: Type Description AlertException An error occured during case task search Source code in thehive4py/api.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 def find_tasks ( self , ** attributes ): \"\"\" Find case tasks using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case tasks. Raises: AlertException: An error occured during case task search \"\"\" return self . __find_rows ( \"/api/case/task/_search\" , ** attributes ) get_alert ( self , alert_id , similar_cases = False ) # Get an alert by its id Parameters: Name Type Description Default alert_id str Id of the alert required similar_cases bool True if similar cases should be retrieved (Default False) False Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 def get_alert ( self , alert_id , similar_cases = False ): \"\"\" Get an alert by its id Arguments: alert_id (str): Id of the alert similar_cases (bool): True if similar cases should be retrieved (Default False) Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) params = {} if similar_cases : params = { \"similarity\" : int ( similar_cases ) } try : return requests . get ( req , proxies = self . proxies , params = params , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert fetch error: {} \" . format ( e )) get_case ( self , case_id ) # Get a case by id Parameters: Name Type Description Default case_id str Case identifier required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case fetch Source code in thehive4py/api.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def get_case ( self , case_id ): \"\"\" Get a case by id Arguments: case_id (str): Case identifier Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case fetch \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case fetch error: {} \" . format ( e )) get_case_observable ( self , observable_id ) # Get a case observable by its id Parameters: Name Type Description Default observable_id str Case observable identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case observable Exceptions: Type Description CaseObservableException An error occured during case observable fetch Source code in thehive4py/api.py 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 def get_case_observable ( self , observable_id ): \"\"\" Get a case observable by its id Arguments: observable_id (str): Case observable identifier Returns: response (requests.Response): Response object including a JSON representation of the case observable Raises: CaseObservableException: An error occured during case observable fetch \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable search error: {} \" . format ( e )) get_case_observables ( self , case_id , ** attributes ) # Find observables of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case observable. Exceptions: Type Description CaseObservableException An error occured during case observable search Source code in thehive4py/api.py 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def get_case_observables ( self , case_id , ** attributes ): \"\"\" Find observables of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case observable. Raises: CaseObservableException: An error occured during case observable search \"\"\" req = self . url + \"/api/case/artifact/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observables search error: {} \" . format ( e )) get_case_task ( self , task_id ) # Get a case task by its id Parameters: Name Type Description Default task_id str Case task identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case task Exceptions: Type Description CaseTaskException An error occured during case task fetch Source code in thehive4py/api.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 def get_case_task ( self , task_id ): \"\"\" Get a case task by its id Arguments: task_id (str): Case task identifier Returns: response (requests.Response): Response object including a JSON representation of the case task Raises: CaseTaskException: An error occured during case task fetch \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e )) get_case_tasks ( self , case_id , ** attributes ) # Find tasks of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case task. Exceptions: Type Description CaseTaskException An error occured during case task search Source code in thehive4py/api.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 def get_case_tasks ( self , case_id , ** attributes ): \"\"\" Find tasks of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case task. Raises: CaseTaskException: An error occured during case task search \"\"\" req = self . url + \"/api/case/task/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case tasks search error: {} \" . format ( e )) get_case_template ( self , name ) # Get a case template by its name Parameters: Name Type Description Default name str Case template's name required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CaseTemplateException An error occured during case template fetch Source code in thehive4py/api.py 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 def get_case_template ( self , name ): \"\"\" Get a case template by its name Arguments: name (str): Case template's name Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CaseTemplateException: An error occured during case template fetch \"\"\" req = self . url + \"/api/case/template/_search\" if self . __isVersion ( Version . THEHIVE_3 . value ): query = And ( Eq ( \"name\" , name ), Eq ( \"status\" , \"Ok\" )) else : query = Eq ( \"name\" , name ) data = { \"query\" : query } try : response = requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) json_response = response . json () if response . status_code == 200 and len ( json_response ) > 0 : return response . json ()[ 0 ] else : raise CaseTemplateException ( \"Case template fetch error: Unable to find case template {} \" . format ( name )) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template fetch error: {} \" . format ( e )) get_current_user ( self ) # Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description response (requests.Response) Response object including a JSON description of the current user Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def get_current_user ( self ): \"\"\" Method to call the /api/current endpoint, returning the current authenticated user. Returns: response (requests.Response): Response object including a JSON description of the current user Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/user/current\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving current user: {} \" . format ( e )) get_linked_cases ( self , case_id ) # Find related cases of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required Returns: Type Description response (requests.Response) Response object including a JSON array of related cases. Exceptions: Type Description CaseException An error occured during case links fetch Source code in thehive4py/api.py 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 def get_linked_cases ( self , case_id ): \"\"\" Find related cases of a given case identified by its id Arguments: case_id (str): Id of the case Returns: response (requests.Response): Response object including a JSON array of related cases. Raises: CaseException: An error occured during case links fetch \"\"\" req = self . url + \"/api/case/ {} /links\" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Linked cases fetch error: {} \" . format ( e )) get_task_log ( self , log_id ) # Get a case task log by its id Parameters: Name Type Description Default log_id str Case task log identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case task log Exceptions: Type Description CaseTaskException An error occured during case task log fetch Source code in thehive4py/api.py 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 def get_task_log ( self , log_id ): \"\"\" Get a case task log by its id Arguments: log_id (str): Case task log identifier Returns: response (requests.Response): Response object including a JSON representation of the case task log Raises: CaseTaskException: An error occured during case task log fetch \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): req = self . url + \"/api/case/task/log/ {} \" . format ( log_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Case task log fetch error: {} \" . format ( e )) else : req = self . url + \"/api/v1/query\" data = { \"query\" : [ { \"_name\" : \"getLog\" , \"idOrName\" : log_id } ] } try : return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Case task log fetch error: {} \" . format ( e )) get_task_logs ( self , task_id , ** attributes ) # Get logs of a case task by its id Parameters: Name Type Description Default task_id str Case task identifier required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description CaseTaskException An error occured during case task log search Source code in thehive4py/api.py 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 def get_task_logs ( self , task_id , ** attributes ): \"\"\" Get logs of a case task by its id Arguments: task_id (str): Case task identifier query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: CaseTaskException: An error occured during case task log search \"\"\" req = self . url + \"/api/case/task/log/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case_task' , Id ( task_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } return self . find_task_logs ( query = criteria , ** params ) health ( self ) # Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def health ( self ): \"\"\" Method to call the /api/health endpoint Returns: Response object resulting from the API call. Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/health\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving health status: {} \" . format ( e )) mark_alert_as_read ( self , alert_id ) # Mark an alert as read. This sets the status of the alert to Ignored if it's not yet promoted to a case. Parameters: Name Type Description Default alert_id str Id of the alert required Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 def mark_alert_as_read ( self , alert_id ): \"\"\" Mark an alert as read. This sets the status of the alert to `Ignored` if it's not yet promoted to a case. Arguments: alert_id (str): Id of the alert Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} /markAsRead\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Mark alert as read error: {} \" . format ( e )) mark_alert_as_unread ( self , alert_id ) # Mark an alert as unread. This sets the status of the alert to New if it's not yet promoted to a case. Parameters: Name Type Description Default alert_id str Id of the alert required Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 def mark_alert_as_unread ( self , alert_id ): \"\"\" Mark an alert as unread. This sets the status of the alert to `New` if it's not yet promoted to a case. Arguments: alert_id (str): Id of the alert Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} /markAsUnread\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Mark alert as unread error: {} \" . format ( e )) merge_alert_into_case ( self , alert_id , case_id ) # Merge alert into existing case. :param alert_id: The ID of the alert to merge. :param case_id: The ID of the case where to merge alert :return: Source code in thehive4py/api.py 953 954 955 956 957 958 959 960 961 962 963 964 965 def merge_alert_into_case ( self , alert_id , case_id ): \"\"\" Merge alert into existing case. :param alert_id: The ID of the alert to merge. :param case_id: The ID of the case where to merge alert :return: \"\"\" req = self . url + \"/api/alert/ {} /merge/ {} \" . format ( alert_id , case_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, json = {}, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Merge alert to case error: {} \" . format ( e )) promote_alert_to_case ( self , alert_id , case_template = None ) # Create a new case from an alert, with an optional case template Parameters: Name Type Description Default alert_id str Id of the alert required case_template str Case template name to apply when creating the cas None Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert promotion Source code in thehive4py/api.py 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 def promote_alert_to_case ( self , alert_id , case_template = None ): \"\"\" Create a new case from an alert, with an optional case template Arguments: alert_id (str): Id of the alert case_template (str): Case template name to apply when creating the cas Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert promotion \"\"\" req = self . url + \"/api/alert/ {} /createCase\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert , data = json . dumps ({ \"caseTemplate\" : case_template })) except requests . exceptions . RequestException as the_exception : raise AlertException ( \"Couldn't promote alert to case: {} \" . format ( the_exception )) return None run_analyzer ( self , cortex_id , artifact_id , analyzer_id ) # Create a new case from an alert, with an optional case template Parameters: Name Type Description Default cortex_id identifier of the Cortex server required artifact_id identifier of the artifact as found with an artifact search required analyzer_id name of the analyzer used by the job required Returns: Type Description response (requests.Response) Response object including a JSON representation of the analysis job Exceptions: Type Description TheHiveException An error occured during job creation Source code in thehive4py/api.py 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def run_analyzer ( self , cortex_id , artifact_id , analyzer_id ): \"\"\" Create a new case from an alert, with an optional case template Arguments: cortex_id: identifier of the Cortex server artifact_id: identifier of the artifact as found with an artifact search analyzer_id: name of the analyzer used by the job Returns: response (requests.Response): Response object including a JSON representation of the analysis job Raises: TheHiveException: An error occured during job creation \"\"\" req = self . url + \"/api/connector/cortex/job\" try : data = json . dumps ({ \"cortexId\" : cortex_id , \"artifactId\" : artifact_id , \"analyzerId\" : analyzer_id }) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Analyzer run error: {} \" . format ( e )) update_alert ( self , alert_id , alert , fields = []) # Update an alert completely or using specified fields Parameters: Name Type Description Default alert_id str Id of the alert required alert Alert Instance of [Alert][thehive4py.models.Alert] required fields Array Optional parameter, an array of field names, the ones we want to update Updatable fields are: [ tlp , severity , tags , caseTemplate , title , description , customFields ] [] Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 def update_alert ( self , alert_id , alert , fields = []): \"\"\" Update an alert completely or using specified fields Arguments: alert_id (str): Id of the alert alert (Alert): Instance of [Alert][thehive4py.models.Alert] fields (Array): Optional parameter, an array of field names, the ones we want to update Updatable fields are: [`tlp`, `severity`, `tags`, `caseTemplate`, `title`, `description`, `customFields`] Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) # update only the alert attributes that are not read-only update_keys = [ 'tlp' , 'pap' , 'severity' , 'tags' , 'caseTemplate' , 'title' , 'description' , 'customFields' , 'artifacts' , 'follow' ] data = { k : v for k , v in alert . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} if 'artifacts' in data : data [ 'artifacts' ] = [ a . __dict__ for a in alert . artifacts ] # data['artifacts'] = [{k: v for k, v in a.__dict__.items()} for a in alert.artifacts] # Exclude PAP field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'pap' , None ) data . pop ( 'externalLink' , None ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert update error: {} \" . format ( e )) update_alert_artifact ( self , artifact_id , alert_artifact , fields = []) # Update an existing alert artifact Parameters: Name Type Description Default artifact_id Artifact identifier required alert_artifact AlertArtifact Instance of [AlertArtifact][thehive4py.models.AlertArtifact] required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of the updated alert artifact Exceptions: Type Description AlertArtifactException An error occured during alert artifact update Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 def update_alert_artifact ( self , artifact_id , alert_artifact , fields = []): \"\"\" Update an existing alert artifact Arguments: artifact_id: Artifact identifier alert_artifact (AlertArtifact): Instance of [AlertArtifact][thehive4py.models.AlertArtifact] fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of the updated alert artifact Raises: AlertArtifactException: An error occured during alert artifact update !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/artifact/ {} \" . format ( artifact_id ) update_keys = [ 'message' , 'tlp' , 'tags' , 'ioc' , 'sighted' , 'ignoreSimilarity' ] data = { k : v for k , v in alert_artifact . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e )) update_case ( self , case , fields = []) # Update a case. Parameters: Name Type Description Default case Case Instance of [Case][thehive4py.models.Case] to update. The case's id determines which case to update. required fields Array Optional parameter, an array of fields names, the ones we want to update Updatable fields are: [ title , description , severity , startDate , owner , flag , tlp , pap , tags , status , resolutionStatus , impactStatus , summary , endDate , metrics , customFields ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def update_case ( self , case , fields = []): \"\"\" Update a case. Arguments: case (Case): Instance of [Case][thehive4py.models.Case] to update. The case's `id` determines which case to update. fields (Array): Optional parameter, an array of fields names, the ones we want to update Updatable fields are: [`title`, `description`, `severity`, `startDate`, `owner`, `flag`, `tlp`, `pap`, `tags`, `status`, `resolutionStatus`, `impactStatus`, `summary`, `endDate`, `metrics`, `customFields`] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/ {} \" . format ( case . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'severity' , 'startDate' , 'owner' , 'flag' , 'tlp' , 'pap' , 'tags' , 'status' , 'resolutionStatus' , 'impactStatus' , 'summary' , 'endDate' , 'metrics' , 'customFields' ] data = { k : v for k , v in case . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case update error: {} \" . format ( e )) update_case_observable ( self , observable_id , case_observable , fields = []) # Update an existing case observable Parameters: Name Type Description Default observable_id Observable identifier required case_observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of the updated case observable Exceptions: Type Description CaseObservableException An error occured during case observable update Source code in thehive4py/api.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def update_case_observable ( self , observable_id , case_observable , fields = []): \"\"\" Update an existing case observable Arguments: observable_id: Observable identifier case_observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of the updated case observable Raises: CaseObservableException: An error occured during case observable update \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) update_keys = [ 'message' , 'tlp' , 'tags' , 'ioc' , 'sighted' , 'ignoreSimilarity' ] data = { k : v for k , v in case_observable . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'ignoreSimilarity' , None ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e )) update_case_observables ( self , observable , fields = []) # [DEPRECATED] Update a case observable Parameters: Name Type Description Default observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] to update. The observable's id determines which case to update. required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during observable update Source code in thehive4py/api.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 def update_case_observables ( self , observable , fields = []): \"\"\" [DEPRECATED] Update a case observable Arguments: observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] to update. The observable's `id` determines which case to update. fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during observable update \"\"\" return self . update_case_observable ( observable . id , observable , fields = fields ) update_case_task ( self , task , fields = []) # Update a case task Parameters: Name Type Description Default task CaseTask Instance of [CaseTask][thehive4py.models.CaseTask] required fields array Arry of strings representing CaseTask properties to be updated Updatable fields are: [ title , description , status , order , user , owner , flag , endDate ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 def update_case_task ( self , task , fields = []): \"\"\" Update a case task Arguments: task (CaseTask): Instance of [CaseTask][thehive4py.models.CaseTask] fields (array): Arry of strings representing CaseTask properties to be updated Updatable fields are: [`title`, `description`, `status`, `order`, `user`, `owner`, `flag`, `endDate`] Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'status' , 'order' , 'user' , 'owner' , 'flag' , 'endDate' ] data = { k : v for k , v in task . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task update error: {} \" . format ( e ))","title":"API"},{"location":"reference/api/#api","text":"This is the reference of all the methods available on thehive4py.api.TheHiveApi .","title":"API"},{"location":"reference/api/#thehive4py.api","text":"","title":"thehive4py.api"},{"location":"reference/api/#thehive4py.api.TheHiveApi","text":"","title":"TheHiveApi"},{"location":"reference/api/#thehive4py.api.TheHiveApi.__init__","text":"Python API client for TheHive. Parameters: Name Type Description Default url str URL of Thehive instance, including the port. Ex: http://myserver:9000 required principal str The API key, or the username if basic authentication is used. required password str The password for basic authentication or None. Defaults to None None proxies dict The proxy configuration, would have http and https attributes. Defaults to {} proxies : { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } {} cert bool Wether or not to enable SSL certificate validation True organisation str The name of the organisation against which api calls will be run. Defaults to None None version int The version of TheHive instance. Defaults to 3 3 Examples Basic Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' ) Full options Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate proxies = { \"http: \" http : // my_proxy : 8080 \" \"https: \" http : // my_proxy : 8080 \" } api = TheHiveApi ( 'http://my_thehive:9000' , 'my_api_key' , None , proxies , True , 'my-org' , version = Version . THEHIVE_3 . value ) Source code in thehive4py/api.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , url : str , principal : str , password = None , proxies = {}, cert = True , organisation = None , version = Version . THEHIVE_3 . value ): \"\"\" Python API client for TheHive. Arguments: url (str): URL of Thehive instance, including the port. Ex: `http://myserver:9000` principal (str): The API key, or the username if basic authentication is used. password (str): The password for basic authentication or None. Defaults to None proxies (dict): The proxy configuration, would have `http` and `https` attributes. Defaults to {} ```python proxies: { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } ``` cert (bool): Wether or not to enable SSL certificate validation organisation (str): The name of the organisation against which api calls will be run. Defaults to None version (int): The version of TheHive instance. Defaults to 3 ??? note \"Examples\" === \"Basic\" Example of simple usage: call TheHive APIs using an API key, without proxy, nor organisation ```python api = TheHiveApi('http://my_thehive:9000', 'my_api_key') ``` === \"Full options\" Example using all the options: call TheHive APIs using an API key, with orgnisation, proxy and sst certificate ```python proxies = { \"http: \"http://my_proxy:8080\" \"https: \"http://my_proxy:8080\" } api = TheHiveApi('http://my_thehive:9000', 'my_api_key', None, proxies, True, 'my-org', version=Version.THEHIVE_3.value ) ``` \"\"\" self . url = url self . principal = principal self . password = password self . proxies = proxies self . organisation = organisation if self . password is not None : self . auth = BasicAuth ( self . principal , self . password , self . organisation ) else : self . auth = BearerAuth ( self . principal , self . organisation ) self . cert = cert self . version = version # Create a CaseHelper instance self . case = CaseHelper ( self )","title":"__init__()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_alert","text":"Create an alert. Supports adding observables and custom fields Parameters: Name Type Description Default alert Alert Instance of [Alert][thehive4py.models.Alert] required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description AlertException An error occured during alert creation Source code in thehive4py/api.py 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 def create_alert ( self , alert ): \"\"\" Create an alert. Supports adding observables and custom fields Arguments: alert (Alert): Instance of [Alert][thehive4py.models.Alert] Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: AlertException: An error occured during alert creation \"\"\" req = self . url + \"/api/alert\" to_exclude = [ 'id' ] # Exclude PAP field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): to_exclude . append ( 'pap' ) to_exclude . append ( 'externalLink' ) data = alert . jsonify ( excludes = to_exclude ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert create error: {} \" . format ( e ))","title":"create_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_alert_artifact","text":"Create an alert artifact Parameters: Name Type Description Default alert_id str Alert identifier required alert_artifact AlertArtifact Instance of [AlertArtifact][thehive4py.models.AlertArtifact] required Returns: Type Description response (requests.Response) Response object including a JSON description of an alert artifact Exceptions: Type Description AlertArtifactException An error occured during alert artifact creation Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 def create_alert_artifact ( self , alert_id , alert_artifact ): \"\"\" Create an alert artifact Arguments: alert_id (str): Alert identifier alert_artifact (AlertArtifact): Instance of [AlertArtifact][thehive4py.models.AlertArtifact] Returns: response (requests.Response): Response object including a JSON description of an alert artifact Raises: AlertArtifactException: An error occured during alert artifact creation !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/ {} /artifact\" . format ( alert_id ) if alert_artifact . dataType == 'file' : try : fields = [ \"dataType\" , \"message\" , \"tlp\" , \"tags\" , \"ioc\" , \"sighted\" , \"ignoreSimilarity\" ] data = { k : v for k , v in alert_artifact . __dict__ . items () if k in fields } data = { \"_json\" : json . dumps ( data )} return requests . post ( req , data = data , files = alert_artifact . data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact create error: {} \" . format ( e )) else : try : data = alert_artifact . jsonify ( excludes = [ 'id' ]) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact create error: {} \" . format ( e ))","title":"create_alert_artifact()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case","text":"Create a case Parameters: Name Type Description Default case Case Instance of [Case][thehive4py.models.Case] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 def create_case ( self , case ): \"\"\" Create a case Arguments: case (Case): Instance of [Case][thehive4py.models.Case] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case\" data = case . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case create error: {} \" . format ( e ))","title":"create_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_observable","text":"Create a case observable Parameters: Name Type Description Default case_id str Case identifier required case_observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during case observable creation Source code in thehive4py/api.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 def create_case_observable ( self , case_id , case_observable ): \"\"\" Create a case observable Arguments: case_id (str): Case identifier case_observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during case observable creation \"\"\" req = self . url + \"/api/case/ {} /artifact\" . format ( case_id ) if case_observable . dataType == 'file' : try : data = { \"dataType\" : case_observable . dataType , \"message\" : case_observable . message , \"tlp\" : case_observable . tlp , \"tags\" : case_observable . tags , \"ioc\" : case_observable . ioc , \"sighted\" : case_observable . sighted , \"ignoreSimilarity\" : case_observable . ignoreSimilarity } # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'ignoreSimilarity' , None ) data = { \"_json\" : json . dumps ( data )} return requests . post ( req , data = data , files = case_observable . data [ 0 ], proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e )) else : try : to_exclude = [ 'id' ] # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): to_exclude . append ( 'ignoreSimilarity' ) data = case_observable . jsonify ( excludes = to_exclude ) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable create error: {} \" . format ( e ))","title":"create_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_task","text":"Create a case task Parameters: Name Type Description Default case_id Case identifier required case_task Instance of [CaseTask][thehive4py.models.CaseTask] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 def create_case_task ( self , case_id , case_task ): \"\"\" Create a case task Arguments: case_id: Case identifier case_task: Instance of [CaseTask][thehive4py.models.CaseTask] Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/ {} /task\" . format ( case_id ) data = case_task . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task create error: {} \" . format ( e ))","title":"create_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_case_template","text":"Create a case template Parameters: Name Type Description Default case_template CaseTemplate Instance of [CaseTemplate][thehive4py.models.CaseTemplate] required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CaseTemplateException An error occured during case template creation Source code in thehive4py/api.py 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 def create_case_template ( self , case_template ): \"\"\" Create a case template Arguments: case_template (CaseTemplate): Instance of [CaseTemplate][thehive4py.models.CaseTemplate] Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CaseTemplateException: An error occured during case template creation \"\"\" req = self . url + \"/api/case/template\" data = case_template . jsonify ( excludes = [ 'id' ]) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template create error: {} \" . format ( e ))","title":"create_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_custom_field","text":"Create a custom field Parameters: Name Type Description Default custom_field CustomField Instance of [CustomField][thehive4py.models.CustomField] required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CustomFieldException Custom field already exists CustomFieldException An error occured during custom field creation Warning This function is available only for TheHive 3 Source code in thehive4py/api.py 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 def create_custom_field ( self , custom_field ): \"\"\" Create a custom field Arguments: custom_field (CustomField): Instance of [CustomField][thehive4py.models.CustomField] Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CustomFieldException: Custom field already exists CustomFieldException: An error occured during custom field creation !!! Warning This function is available only for TheHive 3 \"\"\" if self . _check_if_custom_field_exists ( custom_field ): raise CustomFieldException ( 'Field with reference \" {} \" already exists' . format ( custom_field . reference )) data = { \"value\" : { \"name\" : custom_field . name , \"reference\" : custom_field . reference , \"description\" : custom_field . description , \"type\" : custom_field . type , \"options\" : custom_field . options , \"mandatory\" : custom_field . mandatory } } req = self . url + \"/api/list/custom_fields\" try : return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CustomFieldException ( \"Custom field create error: {} \" . format ( e ))","title":"create_custom_field()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.create_task_log","text":"Create a task log either with an attachement or just with a log message. Parameters: Name Type Description Default task_id str Task identifier required case_task_log CaseTaskLocg Instance of [CaseTaskLog][thehive4py.models.CaseTaskLog] required Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 def create_task_log ( self , task_id , case_task_log ): \"\"\" Create a task log either with an attachement or just with a log message. Arguments: task_id (str): Task identifier case_task_log (CaseTaskLocg): Instance of [CaseTaskLog][thehive4py.models.CaseTaskLog] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/task/ {} /log\" . format ( task_id ) data = { '_json' : json . dumps ({ \"message\" : case_task_log . message })} if case_task_log . file : f = case_task_log . attachment try : return requests . post ( req , data = data , files = f , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e )) else : try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = json . dumps ({ 'message' : case_task_log . message }), proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task log create error: {} \" . format ( e ))","title":"create_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_alert","text":"Deletes a TheHive alert. Parameters: Name Type Description Default alert_id str Id of the alert to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description AlertException An error occured during alert deletion Warning TheHive 3: Deleting alert requires admin role TheHive 4: Deleting alert requires a role including manageAlert permissing Source code in thehive4py/api.py 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 def delete_alert ( self , alert_id ): \"\"\" Deletes a TheHive alert. Arguments: alert_id (str): Id of the alert to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: AlertException: An error occured during alert deletion !!! Warning TheHive 3: Deleting alert requires `admin` role TheHive 4: Deleting alert requires a role including `manageAlert` permissing \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) params = { \"force\" : 1 } try : return requests . delete ( req , params = params , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert deletion error: {} \" . format ( e ))","title":"delete_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_alert_artifact","text":"Deletes a TheHive alert artifact. Parameters: Name Type Description Default artifact_id str Id of the artifact to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description AlertArtifactException An error occured during alert artifact deletion Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 def delete_alert_artifact ( self , artifact_id ): \"\"\" Deletes a TheHive alert artifact. Arguments: artifact_id (str): Id of the artifact to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: AlertArtifactException: An error occured during alert artifact deletion !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/artifact/ {} \" . format ( artifact_id ) try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertArtifactException ( \"Alert artifact deletion error: {} \" . format ( e ))","title":"delete_alert_artifact()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case","text":"Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Parameters: Name Type Description Default case_id str Id of the case to delete required force bool True to physically delete the case, False to mark the case as deleted False Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 def delete_case ( self , case_id , force = False ): \"\"\" Deletes a TheHive case. Unless force is set to True the case is 'soft deleted' (status set to deleted). Arguments: case_id (str): Id of the case to delete force (bool): True to physically delete the case, False to mark the case as deleted Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) if force : req += '/force' try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case deletion error: {} \" . format ( e ))","title":"delete_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case_observable","text":"Deletes a TheHive case observable. Parameters: Name Type Description Default observable_id str Id of the observable to delete required Returns: Type Description response (requests.Response) Response object including true or false based on the action's success Exceptions: Type Description CaseObservableException An error occured during case observable deletion Source code in thehive4py/api.py 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 def delete_case_observable ( self , observable_id ): \"\"\" Deletes a TheHive case observable. Arguments: observable_id (str): Id of the observable to delete Returns: response (requests.Response): Response object including true or false based on the action's success Raises: CaseObservableException: An error occured during case observable deletion \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : return requests . delete ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable deletion error: {} \" . format ( e ))","title":"delete_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.delete_case_task","text":"Deletes a TheHive case task. Parameters: Name Type Description Default task_id str Id of the task to delete required Returns: Type Description response (requests.Response) Response object including the updated task Exceptions: Type Description CaseException An error occured during case deletion Source code in thehive4py/api.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 def delete_case_task ( self , task_id ): \"\"\" Deletes a TheHive case task. Arguments: task_id (str): Id of the task to delete Returns: response (requests.Response): Response object including the updated task Raises: CaseException: An error occured during case deletion \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = { 'status' : 'Cancel' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task deletion error: {} \" . format ( e ))","title":"delete_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.download_attachment","text":"Get the content of an attachement object by ID Parameters: Name Type Description Default attachment_id identifier of the attachment object required filename str name of the downloaded file 'attachment' archive bool set to True to zip and password protect the downloaded file False Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 def download_attachment ( self , attachment_id , filename = \"attachment\" , archive = False ): \"\"\" Get the content of an attachement object by ID Arguments: attachment_id: identifier of the attachment object filename (str): name of the downloaded file archive (bool): set to `True` to zip and password protect the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: TheHiveException: An error occured during the attachment download \"\"\" if archive is True : req = self . url + \"/api/datastorezip/ {} ?name {} \" . format ( attachment_id , filename ) else : req = self . url + \"/api/datastore/ {} ?name= {} \" . format ( attachment_id , filename ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving attachment {} : {} \" . format ( attachment_id , e ))","title":"download_attachment()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.download_observable_attachment","text":"Get the content of the attachement object of a file observable Parameters: Name Type Description Default observable_id identifier of the case observable object required archive bool set to False to disable zip and password protection of the downloaded file True Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description CaseObservableException If the observable is not a file TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 def download_observable_attachment ( self , observable_id , archive = True ): \"\"\" Get the content of the attachement object of a file observable Arguments: observable_id: identifier of the case observable object archive (bool): set to `False` to disable zip and password protection of the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: CaseObservableException: If the observable is not a file TheHiveException: An error occured during the attachment download \"\"\" try : # Get the observable by id response = self . get_case_observable ( observable_id ) # Check if it has an attachment observable = response . json () if 'attachment' in observable : attachment = observable [ 'attachment' ] return self . download_attachment ( attachment [ 'id' ], filename = attachment [ 'name' ], archive = True ) else : raise CaseObservableException ( \"Observable {} doesn't have an attachment\" . format ( observable_id )) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Error on retrieving attachment of case observable {} : {} \" . format ( observable_id , e ))","title":"download_observable_attachment()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.download_task_log_attachment","text":"Get the content of the attachement object of a task log Parameters: Name Type Description Default task_log_id identifier of the task log object required archive bool set to True to zip and password protect the downloaded file False Returns: Type Description response (requests.Response) Response object including a the attachment content as bytes Exceptions: Type Description CaseTaskLogException If the task log doesn't have an attachment TheHiveException An error occured during the attachment download Source code in thehive4py/api.py 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 def download_task_log_attachment ( self , task_log_id , archive = False ): \"\"\" Get the content of the attachement object of a task log Arguments: task_log_id: identifier of the task log object archive (bool): set to `True` to zip and password protect the downloaded file Returns: response (requests.Response): Response object including a the attachment content as bytes Raises: CaseTaskLogException: If the task log doesn't have an attachment TheHiveException: An error occured during the attachment download \"\"\" try : # Get the task log by id response = self . get_task_log ( task_log_id ) # Check if it has an attachment if self . __isVersion ( Version . THEHIVE_3 . value ): log = response . json () else : log = response . json ()[ 0 ] if 'attachment' in log : attachment = log [ 'attachment' ] return self . download_attachment ( attachment [ 'id' ], filename = attachment [ 'name' ], archive = archive ) else : raise CaseTaskLogException ( \"Task log {} doesn't have an attachment\" . format ( task_log_id )) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Error on retrieving attachment of task log {} : {} \" . format ( task_log_id , e ))","title":"download_task_log_attachment()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.export_to_misp","text":"Export selected IOCs of a case as an event to a MISP instance This function triggers the same action triggered when the \"Share\" button on the TheHive GUI is clicked Parameters: Name Type Description Default misp_id identifier of the MISP server required case_id str Id of the case required Returns: Type Description response (requests.Response) Response object including a JSON representation of the exported event Exceptions: Type Description TheHiveException An error occured during the export operation Source code in thehive4py/api.py 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 def export_to_misp ( self , misp_id , case_id ): \"\"\" Export selected IOCs of a case as an event to a MISP instance This function triggers the same action triggered when the \"Share\" button on the TheHive GUI is clicked Arguments: misp_id: identifier of the MISP server case_id (str): Id of the case Returns: response (requests.Response): Response object including a JSON representation of the exported event Raises: TheHiveException: An error occured during the export operation \"\"\" req = self . url + \"/api/connector/misp/export/ {0} / {1} \" . format ( case_id , misp_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , json = {}, auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"MISP export error: {} \" . format ( e ))","title":"export_to_misp()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_alerts","text":"Find alerts using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of alerts. Exceptions: Type Description AlertException An error occured during alert search Source code in thehive4py/api.py 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 def find_alerts ( self , ** attributes ): \"\"\" Find alerts using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of alerts. Raises: AlertException: An error occured during alert search \"\"\" return self . __find_rows ( \"/api/alert/_search\" , ** attributes )","title":"find_alerts()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_case_templates","text":"Find case templates using a query, sort and pagination Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case templates Exceptions: Type Description TheHiveException An error occured during case template search Source code in thehive4py/api.py 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 def find_case_templates ( self , ** attributes ): \"\"\" Find case templates using a query, sort and pagination Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case templates Raises: TheHiveException: An error occured during case template search \"\"\" return self . __find_rows ( \"/api/case/template/_search\" , ** attributes )","title":"find_case_templates()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_cases","text":"Find cases using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of cases. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 def find_cases ( self , ** attributes ): \"\"\" Find cases using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of cases. Raises: CaseException: An error occured during case search \"\"\" return self . __find_rows ( \"/api/case/_search\" , ** attributes )","title":"find_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_first","text":"Find cases and return just the first record Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required Returns: Type Description response (dict) A dict object describing the first case resulting from the query and sort options. Exceptions: Type Description CaseException An error occured during case search Source code in thehive4py/api.py 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 def find_first ( self , ** attributes ): \"\"\" Find cases and return just the first record Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order Returns: response (dict): A dict object describing the first case resulting from the query and sort options. Raises: CaseException: An error occured during case search \"\"\" attributes [ 'range' ] = '0-1' try : return self . find_cases ( ** attributes ) . json ()[ 0 ] except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case search error: {} \" . format ( e ))","title":"find_first()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_observables","text":"Find observables using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of observables. Exceptions: Type Description ObservableException An error occured during observable search Source code in thehive4py/api.py 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 def find_observables ( self , ** attributes ): \"\"\" Find observables using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of observables. Raises: ObservableException: An error occured during observable search \"\"\" return self . __find_rows ( \"/api/case/artifact/_search\" , ** attributes )","title":"find_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_task_logs","text":"Find task logs using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description CaseTaskException An error occured during case task log search Source code in thehive4py/api.py 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 def find_task_logs ( self , ** attributes ): \"\"\" Find task logs using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: CaseTaskException: An error occured during case task log search \"\"\" return self . __find_rows ( \"/api/case/task/log/_search\" , ** attributes )","title":"find_task_logs()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.find_tasks","text":"Find case tasks using sort, pagination and a query Parameters: Name Type Description Default query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case tasks. Exceptions: Type Description AlertException An error occured during case task search Source code in thehive4py/api.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 def find_tasks ( self , ** attributes ): \"\"\" Find case tasks using sort, pagination and a query Arguments: query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case tasks. Raises: AlertException: An error occured during case task search \"\"\" return self . __find_rows ( \"/api/case/task/_search\" , ** attributes )","title":"find_tasks()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_alert","text":"Get an alert by its id Parameters: Name Type Description Default alert_id str Id of the alert required similar_cases bool True if similar cases should be retrieved (Default False) False Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 def get_alert ( self , alert_id , similar_cases = False ): \"\"\" Get an alert by its id Arguments: alert_id (str): Id of the alert similar_cases (bool): True if similar cases should be retrieved (Default False) Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) params = {} if similar_cases : params = { \"similarity\" : int ( similar_cases ) } try : return requests . get ( req , proxies = self . proxies , params = params , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert fetch error: {} \" . format ( e ))","title":"get_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case","text":"Get a case by id Parameters: Name Type Description Default case_id str Case identifier required Returns: Type Description response (requests.Response) Response object including a JSON description of the case. Exceptions: Type Description CaseException An error occured during case fetch Source code in thehive4py/api.py 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 def get_case ( self , case_id ): \"\"\" Get a case by id Arguments: case_id (str): Case identifier Returns: response (requests.Response): Response object including a JSON description of the case. Raises: CaseException: An error occured during case fetch \"\"\" req = self . url + \"/api/case/ {} \" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case fetch error: {} \" . format ( e ))","title":"get_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_observable","text":"Get a case observable by its id Parameters: Name Type Description Default observable_id str Case observable identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case observable Exceptions: Type Description CaseObservableException An error occured during case observable fetch Source code in thehive4py/api.py 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 def get_case_observable ( self , observable_id ): \"\"\" Get a case observable by its id Arguments: observable_id (str): Case observable identifier Returns: response (requests.Response): Response object including a JSON representation of the case observable Raises: CaseObservableException: An error occured during case observable fetch \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable search error: {} \" . format ( e ))","title":"get_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_observables","text":"Find observables of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case observable. Exceptions: Type Description CaseObservableException An error occured during case observable search Source code in thehive4py/api.py 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 def get_case_observables ( self , case_id , ** attributes ): \"\"\" Find observables of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case observable. Raises: CaseObservableException: An error occured during case observable search \"\"\" req = self . url + \"/api/case/artifact/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observables search error: {} \" . format ( e ))","title":"get_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_task","text":"Get a case task by its id Parameters: Name Type Description Default task_id str Case task identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case task Exceptions: Type Description CaseTaskException An error occured during case task fetch Source code in thehive4py/api.py 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 def get_case_task ( self , task_id ): \"\"\" Get a case task by its id Arguments: task_id (str): Case task identifier Returns: response (requests.Response): Response object including a JSON representation of the case task Raises: CaseTaskException: An error occured during case task fetch \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task logs search error: {} \" . format ( e ))","title":"get_case_task()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_tasks","text":"Find tasks of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array of case task. Exceptions: Type Description CaseTaskException An error occured during case task search Source code in thehive4py/api.py 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 def get_case_tasks ( self , case_id , ** attributes ): \"\"\" Find tasks of a given case identified by its id Arguments: case_id (str): Id of the case query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array of case task. Raises: CaseTaskException: An error occured during case task search \"\"\" req = self . url + \"/api/case/task/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case' , Id ( case_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } try : return requests . post ( req , params = params , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case tasks search error: {} \" . format ( e ))","title":"get_case_tasks()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_case_template","text":"Get a case template by its name Parameters: Name Type Description Default name str Case template's name required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case template Exceptions: Type Description CaseTemplateException An error occured during case template fetch Source code in thehive4py/api.py 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 def get_case_template ( self , name ): \"\"\" Get a case template by its name Arguments: name (str): Case template's name Returns: response (requests.Response): Response object including a JSON representation of the case template Raises: CaseTemplateException: An error occured during case template fetch \"\"\" req = self . url + \"/api/case/template/_search\" if self . __isVersion ( Version . THEHIVE_3 . value ): query = And ( Eq ( \"name\" , name ), Eq ( \"status\" , \"Ok\" )) else : query = Eq ( \"name\" , name ) data = { \"query\" : query } try : response = requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) json_response = response . json () if response . status_code == 200 and len ( json_response ) > 0 : return response . json ()[ 0 ] else : raise CaseTemplateException ( \"Case template fetch error: Unable to find case template {} \" . format ( name )) except requests . exceptions . RequestException as e : raise CaseTemplateException ( \"Case template fetch error: {} \" . format ( e ))","title":"get_case_template()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_current_user","text":"Method to call the /api/current endpoint, returning the current authenticated user. Returns: Type Description response (requests.Response) Response object including a JSON description of the current user Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def get_current_user ( self ): \"\"\" Method to call the /api/current endpoint, returning the current authenticated user. Returns: response (requests.Response): Response object including a JSON description of the current user Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/user/current\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving current user: {} \" . format ( e ))","title":"get_current_user()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_linked_cases","text":"Find related cases of a given case identified by its id Parameters: Name Type Description Default case_id str Id of the case required Returns: Type Description response (requests.Response) Response object including a JSON array of related cases. Exceptions: Type Description CaseException An error occured during case links fetch Source code in thehive4py/api.py 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 def get_linked_cases ( self , case_id ): \"\"\" Find related cases of a given case identified by its id Arguments: case_id (str): Id of the case Returns: response (requests.Response): Response object including a JSON array of related cases. Raises: CaseException: An error occured during case links fetch \"\"\" req = self . url + \"/api/case/ {} /links\" . format ( case_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Linked cases fetch error: {} \" . format ( e ))","title":"get_linked_cases()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_log","text":"Get a case task log by its id Parameters: Name Type Description Default log_id str Case task log identifier required Returns: Type Description response (requests.Response) Response object including a JSON representation of the case task log Exceptions: Type Description CaseTaskException An error occured during case task log fetch Source code in thehive4py/api.py 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 def get_task_log ( self , log_id ): \"\"\" Get a case task log by its id Arguments: log_id (str): Case task log identifier Returns: response (requests.Response): Response object including a JSON representation of the case task log Raises: CaseTaskException: An error occured during case task log fetch \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): req = self . url + \"/api/case/task/log/ {} \" . format ( log_id ) try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Case task log fetch error: {} \" . format ( e )) else : req = self . url + \"/api/v1/query\" data = { \"query\" : [ { \"_name\" : \"getLog\" , \"idOrName\" : log_id } ] } try : return requests . post ( req , json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskLogException ( \"Case task log fetch error: {} \" . format ( e ))","title":"get_task_log()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.get_task_logs","text":"Get logs of a case task by its id Parameters: Name Type Description Default task_id str Case task identifier required query dict A query object, defined in JSON format or using utiliy methods from thehive4py.query module required sort Array List of fields to sort the result with. Prefix the field name with - for descending order and + for ascending order required range str A range describing the number of rows to be returned required Returns: Type Description response (requests.Response) Response object including a JSON array representing a list of case task logs Exceptions: Type Description CaseTaskException An error occured during case task log search Source code in thehive4py/api.py 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 def get_task_logs ( self , task_id , ** attributes ): \"\"\" Get logs of a case task by its id Arguments: task_id (str): Case task identifier query (dict): A query object, defined in JSON format or using utiliy methods from thehive4py.query module sort (Array): List of fields to sort the result with. Prefix the field name with `-` for descending order and `+` for ascending order range (str): A range describing the number of rows to be returned Returns: response (requests.Response): Response object including a JSON array representing a list of case task logs Raises: CaseTaskException: An error occured during case task log search \"\"\" req = self . url + \"/api/case/task/log/_search\" # Add range and sort parameters params = { \"range\" : attributes . get ( \"range\" , \"all\" ), \"sort\" : attributes . get ( \"sort\" , []) } # Add body parent_criteria = Parent ( 'case_task' , Id ( task_id )) # Append the custom query if specified if \"query\" in attributes : criteria = And ( parent_criteria , attributes [ \"query\" ]) else : criteria = parent_criteria data = { \"query\" : criteria } return self . find_task_logs ( query = criteria , ** params )","title":"get_task_logs()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.health","text":"Method to call the /api/health endpoint Returns: Type Description Response object resulting from the API call. Exceptions: Type Description TheHiveException Generic exception if an error occurs Source code in thehive4py/api.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def health ( self ): \"\"\" Method to call the /api/health endpoint Returns: Response object resulting from the API call. Raises: TheHiveException: Generic exception if an error occurs \"\"\" req = self . url + \"/api/health\" try : return requests . get ( req , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Error on retrieving health status: {} \" . format ( e ))","title":"health()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_read","text":"Mark an alert as read. This sets the status of the alert to Ignored if it's not yet promoted to a case. Parameters: Name Type Description Default alert_id str Id of the alert required Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 def mark_alert_as_read ( self , alert_id ): \"\"\" Mark an alert as read. This sets the status of the alert to `Ignored` if it's not yet promoted to a case. Arguments: alert_id (str): Id of the alert Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} /markAsRead\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Mark alert as read error: {} \" . format ( e ))","title":"mark_alert_as_read()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.mark_alert_as_unread","text":"Mark an alert as unread. This sets the status of the alert to New if it's not yet promoted to a case. Parameters: Name Type Description Default alert_id str Id of the alert required Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 def mark_alert_as_unread ( self , alert_id ): \"\"\" Mark an alert as unread. This sets the status of the alert to `New` if it's not yet promoted to a case. Arguments: alert_id (str): Id of the alert Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} /markAsUnread\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Mark alert as unread error: {} \" . format ( e ))","title":"mark_alert_as_unread()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.merge_alert_into_case","text":"Merge alert into existing case. :param alert_id: The ID of the alert to merge. :param case_id: The ID of the case where to merge alert :return: Source code in thehive4py/api.py 953 954 955 956 957 958 959 960 961 962 963 964 965 def merge_alert_into_case ( self , alert_id , case_id ): \"\"\" Merge alert into existing case. :param alert_id: The ID of the alert to merge. :param case_id: The ID of the case where to merge alert :return: \"\"\" req = self . url + \"/api/alert/ {} /merge/ {} \" . format ( alert_id , case_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, json = {}, proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Merge alert to case error: {} \" . format ( e ))","title":"merge_alert_into_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.promote_alert_to_case","text":"Create a new case from an alert, with an optional case template Parameters: Name Type Description Default alert_id str Id of the alert required case_template str Case template name to apply when creating the cas None Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert promotion Source code in thehive4py/api.py 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 def promote_alert_to_case ( self , alert_id , case_template = None ): \"\"\" Create a new case from an alert, with an optional case template Arguments: alert_id (str): Id of the alert case_template (str): Case template name to apply when creating the cas Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert promotion \"\"\" req = self . url + \"/api/alert/ {} /createCase\" . format ( alert_id ) try : return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, proxies = self . proxies , auth = self . auth , verify = self . cert , data = json . dumps ({ \"caseTemplate\" : case_template })) except requests . exceptions . RequestException as the_exception : raise AlertException ( \"Couldn't promote alert to case: {} \" . format ( the_exception )) return None","title":"promote_alert_to_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.run_analyzer","text":"Create a new case from an alert, with an optional case template Parameters: Name Type Description Default cortex_id identifier of the Cortex server required artifact_id identifier of the artifact as found with an artifact search required analyzer_id name of the analyzer used by the job required Returns: Type Description response (requests.Response) Response object including a JSON representation of the analysis job Exceptions: Type Description TheHiveException An error occured during job creation Source code in thehive4py/api.py 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def run_analyzer ( self , cortex_id , artifact_id , analyzer_id ): \"\"\" Create a new case from an alert, with an optional case template Arguments: cortex_id: identifier of the Cortex server artifact_id: identifier of the artifact as found with an artifact search analyzer_id: name of the analyzer used by the job Returns: response (requests.Response): Response object including a JSON representation of the analysis job Raises: TheHiveException: An error occured during job creation \"\"\" req = self . url + \"/api/connector/cortex/job\" try : data = json . dumps ({ \"cortexId\" : cortex_id , \"artifactId\" : artifact_id , \"analyzerId\" : analyzer_id }) return requests . post ( req , headers = { 'Content-Type' : 'application/json' }, data = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise TheHiveException ( \"Analyzer run error: {} \" . format ( e ))","title":"run_analyzer()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_alert","text":"Update an alert completely or using specified fields Parameters: Name Type Description Default alert_id str Id of the alert required alert Alert Instance of [Alert][thehive4py.models.Alert] required fields Array Optional parameter, an array of field names, the ones we want to update Updatable fields are: [ tlp , severity , tags , caseTemplate , title , description , customFields ] [] Returns: Type Description response (requests.Response) Response object including a JSON representation of the alert Exceptions: Type Description AlertException An error occured during alert update Source code in thehive4py/api.py 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 def update_alert ( self , alert_id , alert , fields = []): \"\"\" Update an alert completely or using specified fields Arguments: alert_id (str): Id of the alert alert (Alert): Instance of [Alert][thehive4py.models.Alert] fields (Array): Optional parameter, an array of field names, the ones we want to update Updatable fields are: [`tlp`, `severity`, `tags`, `caseTemplate`, `title`, `description`, `customFields`] Returns: response (requests.Response): Response object including a JSON representation of the alert Raises: AlertException: An error occured during alert update \"\"\" req = self . url + \"/api/alert/ {} \" . format ( alert_id ) # update only the alert attributes that are not read-only update_keys = [ 'tlp' , 'pap' , 'severity' , 'tags' , 'caseTemplate' , 'title' , 'description' , 'customFields' , 'artifacts' , 'follow' ] data = { k : v for k , v in alert . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} if 'artifacts' in data : data [ 'artifacts' ] = [ a . __dict__ for a in alert . artifacts ] # data['artifacts'] = [{k: v for k, v in a.__dict__.items()} for a in alert.artifacts] # Exclude PAP field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'pap' , None ) data . pop ( 'externalLink' , None ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise AlertException ( \"Alert update error: {} \" . format ( e ))","title":"update_alert()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_alert_artifact","text":"Update an existing alert artifact Parameters: Name Type Description Default artifact_id Artifact identifier required alert_artifact AlertArtifact Instance of [AlertArtifact][thehive4py.models.AlertArtifact] required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of the updated alert artifact Exceptions: Type Description AlertArtifactException An error occured during alert artifact update Warning This function is available in TheHive 4 ONLY Source code in thehive4py/api.py 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 def update_alert_artifact ( self , artifact_id , alert_artifact , fields = []): \"\"\" Update an existing alert artifact Arguments: artifact_id: Artifact identifier alert_artifact (AlertArtifact): Instance of [AlertArtifact][thehive4py.models.AlertArtifact] fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of the updated alert artifact Raises: AlertArtifactException: An error occured during alert artifact update !!! Warning This function is available in TheHive 4 ONLY \"\"\" if self . __isVersion ( Version . THEHIVE_3 . value ): raise AlertArtifactException ( \"This function is available in TheHive 4 ONLY\" ) req = self . url + \"/api/alert/artifact/ {} \" . format ( artifact_id ) update_keys = [ 'message' , 'tlp' , 'tags' , 'ioc' , 'sighted' , 'ignoreSimilarity' ] data = { k : v for k , v in alert_artifact . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e ))","title":"update_alert_artifact()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case","text":"Update a case. Parameters: Name Type Description Default case Case Instance of [Case][thehive4py.models.Case] to update. The case's id determines which case to update. required fields Array Optional parameter, an array of fields names, the ones we want to update Updatable fields are: [ title , description , severity , startDate , owner , flag , tlp , pap , tags , status , resolutionStatus , impactStatus , summary , endDate , metrics , customFields ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case Exceptions: Type Description CaseException An error occured during case creation Source code in thehive4py/api.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def update_case ( self , case , fields = []): \"\"\" Update a case. Arguments: case (Case): Instance of [Case][thehive4py.models.Case] to update. The case's `id` determines which case to update. fields (Array): Optional parameter, an array of fields names, the ones we want to update Updatable fields are: [`title`, `description`, `severity`, `startDate`, `owner`, `flag`, `tlp`, `pap`, `tags`, `status`, `resolutionStatus`, `impactStatus`, `summary`, `endDate`, `metrics`, `customFields`] Returns: response (requests.Response): Response object including a JSON description of a case Raises: CaseException: An error occured during case creation \"\"\" req = self . url + \"/api/case/ {} \" . format ( case . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'severity' , 'startDate' , 'owner' , 'flag' , 'tlp' , 'pap' , 'tags' , 'status' , 'resolutionStatus' , 'impactStatus' , 'summary' , 'endDate' , 'metrics' , 'customFields' ] data = { k : v for k , v in case . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseException ( \"Case update error: {} \" . format ( e ))","title":"update_case()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observable","text":"Update an existing case observable Parameters: Name Type Description Default observable_id Observable identifier required case_observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of the updated case observable Exceptions: Type Description CaseObservableException An error occured during case observable update Source code in thehive4py/api.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 def update_case_observable ( self , observable_id , case_observable , fields = []): \"\"\" Update an existing case observable Arguments: observable_id: Observable identifier case_observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of the updated case observable Raises: CaseObservableException: An error occured during case observable update \"\"\" req = self . url + \"/api/case/artifact/ {} \" . format ( observable_id ) update_keys = [ 'message' , 'tlp' , 'tags' , 'ioc' , 'sighted' , 'ignoreSimilarity' ] data = { k : v for k , v in case_observable . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} # Exclude ignoreSimilarity field for TheHive 3 if self . __isVersion ( Version . THEHIVE_3 . value ): data . pop ( 'ignoreSimilarity' , None ) try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseObservableException ( \"Case observable update error: {} \" . format ( e ))","title":"update_case_observable()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_observables","text":"[DEPRECATED] Update a case observable Parameters: Name Type Description Default observable CaseObservable Instance of [CaseObservable][thehive4py.models.CaseObservable] to update. The observable's id determines which case to update. required fields Array Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [ tlp , ioc , sighted , tags , message , ignoreSimilarity ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case observable Exceptions: Type Description CaseObservableException An error occured during observable update Source code in thehive4py/api.py 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 def update_case_observables ( self , observable , fields = []): \"\"\" [DEPRECATED] Update a case observable Arguments: observable (CaseObservable): Instance of [CaseObservable][thehive4py.models.CaseObservable] to update. The observable's `id` determines which case to update. fields (Array): Optional parameter, an array of fields names, the ones we want to update. Updatable fields are: [`tlp`, `ioc`, `sighted`, `tags`, `message`, `ignoreSimilarity`] Returns: response (requests.Response): Response object including a JSON description of a case observable Raises: CaseObservableException: An error occured during observable update \"\"\" return self . update_case_observable ( observable . id , observable , fields = fields )","title":"update_case_observables()"},{"location":"reference/api/#thehive4py.api.TheHiveApi.update_case_task","text":"Update a case task Parameters: Name Type Description Default task CaseTask Instance of [CaseTask][thehive4py.models.CaseTask] required fields array Arry of strings representing CaseTask properties to be updated Updatable fields are: [ title , description , status , order , user , owner , flag , endDate ] [] Returns: Type Description response (requests.Response) Response object including a JSON description of a case task Exceptions: Type Description CaseTaskException An error occured during case task creation Source code in thehive4py/api.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 def update_case_task ( self , task , fields = []): \"\"\" Update a case task Arguments: task (CaseTask): Instance of [CaseTask][thehive4py.models.CaseTask] fields (array): Arry of strings representing CaseTask properties to be updated Updatable fields are: [`title`, `description`, `status`, `order`, `user`, `owner`, `flag`, `endDate`] Returns: response (requests.Response): Response object including a JSON description of a case task Raises: CaseTaskException: An error occured during case task creation \"\"\" req = self . url + \"/api/case/task/ {} \" . format ( task . id ) # Choose which attributes to send update_keys = [ 'title' , 'description' , 'status' , 'order' , 'user' , 'owner' , 'flag' , 'endDate' ] data = { k : v for k , v in task . __dict__ . items () if ( len ( fields ) > 0 and k in fields ) or ( len ( fields ) == 0 and k in update_keys )} try : return requests . patch ( req , headers = { 'Content-Type' : 'application/json' }, json = data , proxies = self . proxies , auth = self . auth , verify = self . cert ) except requests . exceptions . RequestException as e : raise CaseTaskException ( \"Case task update error: {} \" . format ( e ))","title":"update_case_task()"},{"location":"reference/auth/","text":"Auth # # BasicAuth # A custom basic authentication class for requests, that takes into account the organisation header __init__ ( self , username , password , organisation = None ) special # Constructor Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , username , password , organisation = None ): \"\"\" Constructor Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation BearerAuth # A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header __init__ ( self , api_key , organisation = None ) special # Constructor Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , api_key , organisation = None ): \"\"\" Constructor Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"Auth"},{"location":"reference/auth/#auth","text":"","title":"Auth"},{"location":"reference/auth/#thehive4py.auth","text":"","title":"thehive4py.auth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth","text":"A custom basic authentication class for requests, that takes into account the organisation header","title":"BasicAuth"},{"location":"reference/auth/#thehive4py.auth.BasicAuth.__init__","text":"Constructor Parameters: Name Type Description Default username str The username to use for the authentication. required password str The password to use for the authentication. required organisation str The organisation to use. None Source code in thehive4py/auth.py 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , username , password , organisation = None ): \"\"\" Constructor Arguments: username (str): The username to use for the authentication. password (str): The password to use for the authentication. organisation (str): The organisation to use. \"\"\" self . username = username self . password = password self . organisation = organisation","title":"__init__()"},{"location":"reference/auth/#thehive4py.auth.BearerAuth","text":"A custom authentication class for requests, relying on API key (Bearer authorization header), and taking into account the organisation header","title":"BearerAuth"},{"location":"reference/auth/#thehive4py.auth.BearerAuth.__init__","text":"Constructor Parameters: Name Type Description Default api_key str The API Key to use for the authentication required organisation str The organisation to use. None Source code in thehive4py/auth.py 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , api_key , organisation = None ): \"\"\" Constructor Arguments: api_key (str): The API Key to use for the authentication organisation (str): The organisation to use. \"\"\" self . api_key = api_key self . organisation = organisation","title":"__init__()"},{"location":"reference/exceptions/","text":"Exceptions # # AlertArtifactException # Exception raised by failure of API calls related to Alert Artifact handling AlertException # Exception raised by failure of API calls related to Alert handling CaseException # Exception raised by failure of API calls related to Case handling CaseObservableException # Exception raised by failure of API calls related to Case Observable handling CaseTaskException # Exception raised by failure of API calls related to Case Task handling CaseTaskLogException # Exception raised by failure of API calls related to Case Task Log handling CaseTemplateException # Exception raised by failure of API calls related to Case Template handling CustomFieldException # Exception raised by failure of API calls related to Custom Fields handling ObservableException # Exception raised by failure of API calls related to Observable handling TheHiveException # Base class for TheHive exceptions","title":"Exceptions"},{"location":"reference/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions","text":"","title":"thehive4py.exceptions"},{"location":"reference/exceptions/#thehive4py.exceptions.AlertArtifactException","text":"Exception raised by failure of API calls related to Alert Artifact handling","title":"AlertArtifactException"},{"location":"reference/exceptions/#thehive4py.exceptions.AlertException","text":"Exception raised by failure of API calls related to Alert handling","title":"AlertException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseException","text":"Exception raised by failure of API calls related to Case handling","title":"CaseException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseObservableException","text":"Exception raised by failure of API calls related to Case Observable handling","title":"CaseObservableException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTaskException","text":"Exception raised by failure of API calls related to Case Task handling","title":"CaseTaskException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTaskLogException","text":"Exception raised by failure of API calls related to Case Task Log handling","title":"CaseTaskLogException"},{"location":"reference/exceptions/#thehive4py.exceptions.CaseTemplateException","text":"Exception raised by failure of API calls related to Case Template handling","title":"CaseTemplateException"},{"location":"reference/exceptions/#thehive4py.exceptions.CustomFieldException","text":"Exception raised by failure of API calls related to Custom Fields handling","title":"CustomFieldException"},{"location":"reference/exceptions/#thehive4py.exceptions.ObservableException","text":"Exception raised by failure of API calls related to Observable handling","title":"ObservableException"},{"location":"reference/exceptions/#thehive4py.exceptions.TheHiveException","text":"Base class for TheHive exceptions","title":"TheHiveException"},{"location":"reference/models/","text":"Models # # Alert # Model class describing an alert as defined in TheHive Parameters: Name Type Description Default id str Alert's id. Default: None required tlp Enum Alert's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Alert's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 (TheHive 4 ONLY) required severity Enum Alert's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required date datetime Alert's occur date. Default: Now() required tags str[] List of alert tags. Default: [] required title str Alert's description. Default: None required type str Alert's type. Default: None required source str Alert's source. Default: None required sourceRef str Alert's source reference. Used to specify the unique identifier of the alert. Default: None required externalLink str Alert's external link. Used to easily navigate to the source of the alert. Default: None required description str Alert's description. Default: None required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required caseTemplate str Alert template's name. Default: None required json JSON If the field is not equal to None, the Alert is instantiated using the JSON value instead of the arguements required Warning pap , externalLink attributes are available in TheHive 4 ONLY AlertArtifact # Model class describing a alert observable as defined in TheHive Parameters: Name Type Description Default dataType str Observable's type, must be a valid type, one of the defined data types in TheHive. Default: None required message str Observable's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required ioc bool Observable's ioc flag, True to mark an observable as IOC. Default: False required sighted bool Observable's sighted flag, True to mark the observable as sighted. Default: False required ignoreSimilarity bool Observable's similarity ignore flag. True to ignore the observable during similarity computing required tags str[] List of observable tags. Default: [] required data str | (file, str Observable's data: If the dataType field is set to file , then there are two options: data must be equal to a string representing the file's path data must be equal to Tuple composed by an in memory file object, and the file name Otherwise, the data value is the observable's value required json JSON If the field is not equal to None, the observable is instantiated using the JSON value instead of the arguements required Warning ignoreSimilarity attribute is available in TheHive 4 ONLY Case # Model class describing a case as defined in TheHive Parameters: Name Type Description Default id str Case's id. Default: None required title str Case's description. Default: None required description str Case's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Case's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required severity Enum Case's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required flag bool Case's flag, True to mark the case as important. Default: False required tags str[] List of case tags. Default: [] required startDate datetime Case's start date, the date the case occured. Default: Now() required template str Case template's name. If specified then the case is created using the given template. Default: None required owner str Case's assignee. Default: None required metrics JSON Case metrics collection. A JSON object where keys are defining metric name, and values are defining metric value. Default: {} required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required tasks JSON[] / CaseTask[] Set of taks, defined either as JSON objects or CaseTask instances required json JSON If the field is not equal to None, the case is instantiated using the JSON value instead of the arguements required Warning The metrics field is available in TheHive 3 only CaseHelper # Provides helper methods for interacting with instances of the Case class. __call__ ( self , id ) special # Return an instance of Case with the given case ID. :param id: ID of a case to retrieve. __init__ ( self , thehive ) special # Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance. create ( self , title , description , ** kwargs ) # Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance. status_ok ( status_code ) staticmethod # Check whether a status code is OK update ( self , case_id , ** attributes ) # Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance. CaseObservable # Model class describing a case observable as defined in TheHive Parameters: Name Type Description Default id str Observable's id. Default: None required dataType str Observable's type, must be a valid type, one of the defined data types in TheHive. Default: None required message str Observable's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Case's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required ioc bool Observable's ioc flag, True to mark an observable as IOC. Default: False required sighted bool Observable's sighted flag, True to mark the observable as sighted. Default: False required ignoreSimilarity bool Observable's similarity ignore flag. True to ignore the observable during similarity computing required tags str[] List of observable tags. Default: [] required data str | (file, str Observable's data: If the dataType field is set to file , then there are two options: data must be equal to a string representing the file's path data must be equal to Tuple composed by an in memory file object, and the file name Otherwise, the data value is the observable's value required json JSON If the field is not equal to None, the observable is instantiated using the JSON value instead of the arguements required Warning At least, one of tags or message are required. You cannot create an observable without specifying one of those fields Warning ignoreSimilarity attribute is available in TheHive 4 ONLY CaseStatus # Enumeration representing case statuses Possible values: OPEN, RESOLVED, DELETED, DUPLICATE CaseTask # Model class describing a case task as defined in TheHive Parameters: Name Type Description Default id str Task's id. Default: None required title str Task's description. Default: None required description str Task's description. Default: None required status Enum Task's status: Waiting , InProgress , Cancel , Completed . Default: Waiting required flag bool Task's flag, True to mark the Task as important. Default: False required startDate datetime Task's start date, the date the task started at. Default: None required owner str Task's assignee. Default: None required json JSON If the field is not equal to None, the Task is instantiated using the JSON value instead of the arguements required CaseTaskLog # Model class describing a case task log as defined in TheHive Parameters: Name Type Description Default id str Log's id. Default: None required message str Log's description. Default: None required file str Log attachment's path. If defined, the task log is created and the file is attached to it. Default: None required json JSON If the field is not equal to None, the Task is instantiated using the JSON value instead of the arguements required CaseTemplate # Model class describing a case template as defined in TheHive Parameters: Name Type Description Default id str Template's id. Default: None required titlePrefix str Template's title prefix. Default: None required description str Template's description. Default: None required tlp Enum Template's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Template's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required severity Enum Template's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required flag bool Template's flag, True to mark the case as important when created from a template. Default: False required tags str[] List of template tags. Default: [] required metrics JSON Template metrics collection. A JSON object where keys are defining metric name, and values are defining metric value. Default: {} required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required tasks JSON[] / CaseTask[] Set of taks, defined either as JSON objects or CaseTask instances required json JSON If the field is not equal to None, the template is instantiated using the JSON value instead of the arguements required Warning The metrics field is available in TheHive 3 only CustomField # Model class describing a custom field as defined in TheHive Parameters: Name Type Description Default name str name of the custom field required reference str internal reference name required description str description of the custom field required type Enum type of the field, possible values are string , boolean , number , date , integer , float required options Any[] list of possible values for the field required mandatory bool True if the field is mandatory required CustomFieldHelper # CustomFieldHelper add_boolean ( self , name , value ) # Add a custom field of type bool . Parameters: Name Type Description Default name str name of the custom field required value bool True or False, value of the custom field required add_date ( self , name , value ) # Add a custom field of type date . Parameters: Name Type Description Default name str name of the custom field required value int number of milliseconds representing a timestamp (Example: int(time.time())*1000) required add_float ( self , name , value ) # Add a custom field of type float . Parameters: Name Type Description Default name str name of the custom field required value float value of the custom field required Warning This is method that work for TheHive 4 ONLY add_integer ( self , name , value ) # Add a custom field of type integer . Parameters: Name Type Description Default name str name of the custom field required value int value of the custom field required Warning This is method that work for TheHive 4 ONLY add_number ( self , name , value ) # Add a custom field of type number . Parameters: Name Type Description Default name str name of the custom field required value number value of the custom field required Warning This is method that work for TheHive 3 ONLY add_string ( self , name , value ) # Add a custom field of type string . Parameters: Name Type Description Default name str name of the custom field required value str value of the custom field required build ( self ) # Builds the custom field value dict as expected by TheHive, maintining the order of the fields, specified by order Returns: Type Description dict A json representation of the custom fields map CustomJsonEncoder # Custom JSON encoder class that takes into account [thehive4py.models.JSONSerializable][] instances and datetime.datetime objects default ( self , o ) # Method to serialize [thehive4py.models.JSONSerializable][] objects. Used by [thehive4py.models.JSONSerializable.jsonify][] method JSONSerializable # Abstract class of all the models classes. It defines utility methods called jsonify used to get a model object's JSON representation jsonify ( self , excludes = []) # A method that returns a stringyfied JSON representing a model object Parameters: Name Type Description Default excludes str[] list of fields to exclude from the returned JSON object. [] Returns: Type Description str the JSON string of the object. Pap # Enumeration representing PAP, used in cases, observables and alerts (TheHive 4 only) Possible values: WHITE, GREEN, AMBER, RED Severity # Enumeration representing severity, used in cases and alerts Possible values: LOW, MEDIUM, HIGH, CRITICAL TaskStatus # Enumeration representing task statuses Possible values: WAITING, INPROGRESS, COMPLETED, CANCEL Tlp # Enumeration representing TLP, used in cases, observables and alerts Possible values: WHITE, GREEN, AMBER, RED Version # Enumeration representing a version used to specify the version of TheHive instance Possible values: THEHIVE_3, THEHIVE_4","title":"Models"},{"location":"reference/models/#models","text":"","title":"Models"},{"location":"reference/models/#thehive4py.models","text":"","title":"thehive4py.models"},{"location":"reference/models/#thehive4py.models.Alert","text":"Model class describing an alert as defined in TheHive Parameters: Name Type Description Default id str Alert's id. Default: None required tlp Enum Alert's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Alert's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 (TheHive 4 ONLY) required severity Enum Alert's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required date datetime Alert's occur date. Default: Now() required tags str[] List of alert tags. Default: [] required title str Alert's description. Default: None required type str Alert's type. Default: None required source str Alert's source. Default: None required sourceRef str Alert's source reference. Used to specify the unique identifier of the alert. Default: None required externalLink str Alert's external link. Used to easily navigate to the source of the alert. Default: None required description str Alert's description. Default: None required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required caseTemplate str Alert template's name. Default: None required json JSON If the field is not equal to None, the Alert is instantiated using the JSON value instead of the arguements required Warning pap , externalLink attributes are available in TheHive 4 ONLY","title":"Alert"},{"location":"reference/models/#thehive4py.models.AlertArtifact","text":"Model class describing a alert observable as defined in TheHive Parameters: Name Type Description Default dataType str Observable's type, must be a valid type, one of the defined data types in TheHive. Default: None required message str Observable's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required ioc bool Observable's ioc flag, True to mark an observable as IOC. Default: False required sighted bool Observable's sighted flag, True to mark the observable as sighted. Default: False required ignoreSimilarity bool Observable's similarity ignore flag. True to ignore the observable during similarity computing required tags str[] List of observable tags. Default: [] required data str | (file, str Observable's data: If the dataType field is set to file , then there are two options: data must be equal to a string representing the file's path data must be equal to Tuple composed by an in memory file object, and the file name Otherwise, the data value is the observable's value required json JSON If the field is not equal to None, the observable is instantiated using the JSON value instead of the arguements required Warning ignoreSimilarity attribute is available in TheHive 4 ONLY","title":"AlertArtifact"},{"location":"reference/models/#thehive4py.models.Case","text":"Model class describing a case as defined in TheHive Parameters: Name Type Description Default id str Case's id. Default: None required title str Case's description. Default: None required description str Case's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Case's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required severity Enum Case's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required flag bool Case's flag, True to mark the case as important. Default: False required tags str[] List of case tags. Default: [] required startDate datetime Case's start date, the date the case occured. Default: Now() required template str Case template's name. If specified then the case is created using the given template. Default: None required owner str Case's assignee. Default: None required metrics JSON Case metrics collection. A JSON object where keys are defining metric name, and values are defining metric value. Default: {} required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required tasks JSON[] / CaseTask[] Set of taks, defined either as JSON objects or CaseTask instances required json JSON If the field is not equal to None, the case is instantiated using the JSON value instead of the arguements required Warning The metrics field is available in TheHive 3 only","title":"Case"},{"location":"reference/models/#thehive4py.models.CaseHelper","text":"Provides helper methods for interacting with instances of the Case class.","title":"CaseHelper"},{"location":"reference/models/#thehive4py.models.CaseHelper.__call__","text":"Return an instance of Case with the given case ID. :param id: ID of a case to retrieve.","title":"__call__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.__init__","text":"Initialize a CaseHelper instance. :param thehive: A TheHiveApi instance.","title":"__init__()"},{"location":"reference/models/#thehive4py.models.CaseHelper.create","text":"Create an instance of the Case class. :param title: Case title. :param description: Case description. :param kwargs: Additional arguments. :return: The created instance.","title":"create()"},{"location":"reference/models/#thehive4py.models.CaseHelper.status_ok","text":"Check whether a status code is OK","title":"status_ok()"},{"location":"reference/models/#thehive4py.models.CaseHelper.update","text":"Update a case. :param case_id: The ID of the case to update :param attributes: key=value pairs of case attributes to update (field=new_value) :return: The created instance.","title":"update()"},{"location":"reference/models/#thehive4py.models.CaseObservable","text":"Model class describing a case observable as defined in TheHive Parameters: Name Type Description Default id str Observable's id. Default: None required dataType str Observable's type, must be a valid type, one of the defined data types in TheHive. Default: None required message str Observable's description. Default: None required tlp Enum Case's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Case's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required ioc bool Observable's ioc flag, True to mark an observable as IOC. Default: False required sighted bool Observable's sighted flag, True to mark the observable as sighted. Default: False required ignoreSimilarity bool Observable's similarity ignore flag. True to ignore the observable during similarity computing required tags str[] List of observable tags. Default: [] required data str | (file, str Observable's data: If the dataType field is set to file , then there are two options: data must be equal to a string representing the file's path data must be equal to Tuple composed by an in memory file object, and the file name Otherwise, the data value is the observable's value required json JSON If the field is not equal to None, the observable is instantiated using the JSON value instead of the arguements required Warning At least, one of tags or message are required. You cannot create an observable without specifying one of those fields Warning ignoreSimilarity attribute is available in TheHive 4 ONLY","title":"CaseObservable"},{"location":"reference/models/#thehive4py.models.CaseStatus","text":"Enumeration representing case statuses Possible values: OPEN, RESOLVED, DELETED, DUPLICATE","title":"CaseStatus"},{"location":"reference/models/#thehive4py.models.CaseTask","text":"Model class describing a case task as defined in TheHive Parameters: Name Type Description Default id str Task's id. Default: None required title str Task's description. Default: None required description str Task's description. Default: None required status Enum Task's status: Waiting , InProgress , Cancel , Completed . Default: Waiting required flag bool Task's flag, True to mark the Task as important. Default: False required startDate datetime Task's start date, the date the task started at. Default: None required owner str Task's assignee. Default: None required json JSON If the field is not equal to None, the Task is instantiated using the JSON value instead of the arguements required","title":"CaseTask"},{"location":"reference/models/#thehive4py.models.CaseTaskLog","text":"Model class describing a case task log as defined in TheHive Parameters: Name Type Description Default id str Log's id. Default: None required message str Log's description. Default: None required file str Log attachment's path. If defined, the task log is created and the file is attached to it. Default: None required json JSON If the field is not equal to None, the Task is instantiated using the JSON value instead of the arguements required","title":"CaseTaskLog"},{"location":"reference/models/#thehive4py.models.CaseTemplate","text":"Model class describing a case template as defined in TheHive Parameters: Name Type Description Default id str Template's id. Default: None required titlePrefix str Template's title prefix. Default: None required description str Template's description. Default: None required tlp Enum Template's TLP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required pap Enum Template's PAP: 0 , 1 , 2 , 3 for WHITE , GREEN , AMBER , RED . Default: 2 required severity Enum Template's severity: 1 , 2 , 3 , 4 for LOW , MEDIUM , HIGH , CRTICAL . Default: 2 required flag bool Template's flag, True to mark the case as important when created from a template. Default: False required tags str[] List of template tags. Default: [] required metrics JSON Template metrics collection. A JSON object where keys are defining metric name, and values are defining metric value. Default: {} required customFields CustomField[] A set of CustomField instances, or the result of a CustomFieldHelper.build() method. Default: {} required tasks JSON[] / CaseTask[] Set of taks, defined either as JSON objects or CaseTask instances required json JSON If the field is not equal to None, the template is instantiated using the JSON value instead of the arguements required Warning The metrics field is available in TheHive 3 only","title":"CaseTemplate"},{"location":"reference/models/#thehive4py.models.CustomField","text":"Model class describing a custom field as defined in TheHive Parameters: Name Type Description Default name str name of the custom field required reference str internal reference name required description str description of the custom field required type Enum type of the field, possible values are string , boolean , number , date , integer , float required options Any[] list of possible values for the field required mandatory bool True if the field is mandatory required","title":"CustomField"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper","text":"CustomFieldHelper","title":"CustomFieldHelper"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_boolean","text":"Add a custom field of type bool . Parameters: Name Type Description Default name str name of the custom field required value bool True or False, value of the custom field required","title":"add_boolean()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_date","text":"Add a custom field of type date . Parameters: Name Type Description Default name str name of the custom field required value int number of milliseconds representing a timestamp (Example: int(time.time())*1000) required","title":"add_date()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_float","text":"Add a custom field of type float . Parameters: Name Type Description Default name str name of the custom field required value float value of the custom field required Warning This is method that work for TheHive 4 ONLY","title":"add_float()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_integer","text":"Add a custom field of type integer . Parameters: Name Type Description Default name str name of the custom field required value int value of the custom field required Warning This is method that work for TheHive 4 ONLY","title":"add_integer()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_number","text":"Add a custom field of type number . Parameters: Name Type Description Default name str name of the custom field required value number value of the custom field required Warning This is method that work for TheHive 3 ONLY","title":"add_number()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.add_string","text":"Add a custom field of type string . Parameters: Name Type Description Default name str name of the custom field required value str value of the custom field required","title":"add_string()"},{"location":"reference/models/#thehive4py.models.CustomFieldHelper.build","text":"Builds the custom field value dict as expected by TheHive, maintining the order of the fields, specified by order Returns: Type Description dict A json representation of the custom fields map","title":"build()"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder","text":"Custom JSON encoder class that takes into account [thehive4py.models.JSONSerializable][] instances and datetime.datetime objects","title":"CustomJsonEncoder"},{"location":"reference/models/#thehive4py.models.CustomJsonEncoder.default","text":"Method to serialize [thehive4py.models.JSONSerializable][] objects. Used by [thehive4py.models.JSONSerializable.jsonify][] method","title":"default()"},{"location":"reference/models/#thehive4py.models.JSONSerializable","text":"Abstract class of all the models classes. It defines utility methods called jsonify used to get a model object's JSON representation","title":"JSONSerializable"},{"location":"reference/models/#thehive4py.models.JSONSerializable.jsonify","text":"A method that returns a stringyfied JSON representing a model object Parameters: Name Type Description Default excludes str[] list of fields to exclude from the returned JSON object. [] Returns: Type Description str the JSON string of the object.","title":"jsonify()"},{"location":"reference/models/#thehive4py.models.Pap","text":"Enumeration representing PAP, used in cases, observables and alerts (TheHive 4 only) Possible values: WHITE, GREEN, AMBER, RED","title":"Pap"},{"location":"reference/models/#thehive4py.models.Severity","text":"Enumeration representing severity, used in cases and alerts Possible values: LOW, MEDIUM, HIGH, CRITICAL","title":"Severity"},{"location":"reference/models/#thehive4py.models.TaskStatus","text":"Enumeration representing task statuses Possible values: WAITING, INPROGRESS, COMPLETED, CANCEL","title":"TaskStatus"},{"location":"reference/models/#thehive4py.models.Tlp","text":"Enumeration representing TLP, used in cases, observables and alerts Possible values: WHITE, GREEN, AMBER, RED","title":"Tlp"},{"location":"reference/models/#thehive4py.models.Version","text":"Enumeration representing a version used to specify the version of TheHive instance Possible values: THEHIVE_3, THEHIVE_4","title":"Version"},{"location":"reference/query/","text":"Query # # Overview # This is a module that defines a set of utility methods used to easily build valid search query without the need to use JSON objects. Query objects are used by APIs that allow searchinf for objects like: thehive4py.api.find_cases thehive4py.api.find_alerts thehive4py.api.find_tasks A query is a defined by on of the criteria described below. A query could be used like below: # Define the query query = And ( Eq ( 'owner' , 'admin' ), Between ( 'tlp' , 1 , 3 ), Not ( Eq ( 'status' , 'Deleted' )), Child ( 'case_artifact' , And ( Eq ( 'ioc' , True ), In ( 'dataType' , [ 'file' , 'ip' , 'domain' ]) )) ) # Call find_cases method to search for all the case, sorted by descending created date, # and verifying the following set of conditions: # - owned by admin # - having tlp between GREEN and RED # - not deleted # - having observables of type file, ip or domain that are flagged as IOC api . find_cases ( query = query , sort = [ '-createdAt' ], range = 'all' ) And ( * criteria ) # A criterion used to search for records that verfies all the specified criteria. For example search for observables flagged as IOC and having TLP <= 2 search for closed cases related to customFields.customer \"Company\" and having a WHITE tlp Parameters: Name Type Description Default criteria Array A set of criteria, can be any operator defined in the query module ( Eq , In , Not , And ...) () Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases with customer custom field set to 'Company', having a TLP less than Amber and are resolved query = And ( Eq ( 'customFields.customer.string' , 'Company' ), Lte ( 'tlp' , 2 ), Eq ( 'status' , 'Resolved' ) ) produces { \"_and\" : [ { \"_field\" : \"customFields.customer.string\" , \"_value\" : \"Company\" }, { \"_lte\" : { \"tlp\" : 2 } }, { \"_field\" : \"status\" , \"_value\" : \"Resolved\" } ] } Between ( field , from_value , to_value ) # A criterion used to search for records having field 's value included in a range defined by from_value and to_value . This is an idea criterion to seahrch using date conditions. For example search for cases created between two dates search for alerts with cvss custom field greater that 2 and lesser than 9 Parameters: Name Type Description Default field str field name required from_value Number Lower limit of the range required to_value Number Higher limit of the range required Returns: Type Description dict JSON repsentation of the criterion # Query to search for alerts with cvss custom field greater that 2 and lesser than 9 query = Between ( 'customFields.cvss.float' , 2 , 9 ) produces { \"_between\" : { \"_field\" : \"customFields.cvss.float\" , \"_from\" : 2 , \"_to\" : 9 } } Child ( tpe , criterion ) # A criterion used to search for records by applying a filter on their children using a criterion. For example search for cases having file observables search for cases having a specific ip observable Parameters: Name Type Description Default tpe str class name of the child: case_task , case_artifact ... required criterion Any Any criterion defined by functions from the query module required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases having iocs of type file query = Child ( 'case_artifact' , And ( Eq ( 'dataType' , 'file' ), Eq ( 'ioc' , True ) )) produces { \"_child\" : { \"_type\" : \"case_artifact\" , \"_query\" : { \"_and\" : [ [ { \"_field\" : \"dataType\" , \"_value\" : \"file\" }, { \"_field\" : \"ioc\" , \"_value\" : true } ] ] } } } Contains ( field ) # A criterion used to search for records where field id defined. For example search for cases that have the custom field customer Parameters: Name Type Description Default field str field name required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases having a 'customer' custom field query = Contains ( 'customFields.customer' ) produces { \"_contains\" : \"customFields.customer\" } ContainsString ( field , value ) # A criterion used to search for objects having a text field's value like the specified value . It's a wildcard operator that wraps the searched value with asteriscs. It operates the same way a the Like criterion For example: search for cases where title is like *malspam* search for observable where description contains the text *malware* Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title contains 'Communication' query = ContainsString ( 'title' , 'Communication' ) produces { \"_wildcard\" : { \"_field\" : \"title\" , \"_value\" : \"*Communication*\" } } EndsWith ( field , value ) # A criterion used to search for objects having a text field's value end with value . It's a wildcard operator that adds the * if not specified, at the beginning of value . For example: search for filename observables ending with .exe Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title stats with 'Communication' query = EndsWith ( 'data' , '.png' ) produces { \"_wildcard\" : { \"_field\" : \"data\" , \"_value\" : \"*.png\" } } Eq ( field , value ) # A criterion used to search for a equality. For example search for TLP = 2 search for flag = True search for title = 'Sample case' Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Eq ( 'tlp' , 3 ) produces { \"_field\" : \"tlp\" , \"_value\" : 3 } Gt ( field , value ) # A criterion used to search for a field greater than a certain value. For example search for TLP > 2 search for customFields.cvss > 4.5 search for date > now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Gt ( 'tlp' , 1 ) produces { \"_gt\" : { \"tlp\" : 1 }} Gte ( field , value ) # A criterion used to search for a field greater or equal than a certain value. For example search for TLP >= 2 search for customFields.cvss >= 4.5 search for date >= now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Gte ( 'tlp' , 1 ) produces { \"_gte\" : { \"tlp\" : 1 }} Id ( id ) # A criterion used to search for records by id. For example search for a case by its id search for an alert by its id Parameters: Name Type Description Default id str the id's value required Returns: Type Description dict JSON repsentation of the criterion # Query to search for as case by id query = Id ( '1234545643' ) produces { \"_id\" : \"1234545643\" } In ( field , values ) # A criterion used to search for records where field has one of the values . For example search for observables of type domain, fqdn, ip search for cases tagged as malspam, or phising Parameters: Name Type Description Default field str field name required values Array A set of values the field must be in required Returns: Type Description dict JSON repsentation of the criterion # Query to search for observables of one of the following types: domain, fqdn, ip query = In ( 'dataType' , [ 'domain' , 'fqdn' , 'ip' ]) produces { \"_in\" : { \"_field\" : \"dataType\" , \"_values\" : [ \"domain\" , \"fqdn\" , \"ip\" ] } } Like ( field , value ) # A criterion used to search for objects having a text field's value like the specified value . It's a wildcard operator when the searched value must specify asteriscs. For example: search for cases where title is like *malspam* search for observable where description contains the text *malware* Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title contains 'Communication' query = Like ( 'title' , '*Communication*' ) produces { \"_like\" : { \"_field\" : \"title\" , \"_value\" : \"*Communication*\" } } Note If the * are not specified, the exact same text will be searched for. Like('title', 'MISP') will search for titles equal to 'MISP' Lt ( field , value ) # A criterion used to search for a field less than a certain value. For example search for TLP < 2 search for customFields.cvss < 4.5 search for date < now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Lt ( 'tlp' , 3 ) produces { \"_lt\" : { \"tlp\" : 3 }} Lte ( field , value ) # A criterion used to search for a field less or equal than a certain value. For example search for TLP <= 2 search for customFields.cvss <= 4.5 search for date <= now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Lte ( 'tlp' , 3 ) produces { \"_lte\" : { \"tlp\" : 3 }} Not ( criterion ) # A criterion used to search for records that verfies the opposite of the specified criterion. For example search for observables not marked as ioc search for cases not having a MISP tag Parameters: Name Type Description Default crietrion Any The base criterion to use for negation required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases assigned to jdoe or are flagged and open query = Not ( Eq ( 'ioc' , True )) produces { \"_not\" : { \"_field\" : \"ioc\" , \"_value\" : false } } Or ( * criteria ) # A criterion used to search for records that verfies one of the specified criteria. For example search for observables of type domain or fqdn search for cases assigned to a given user or have a specific tag Parameters: Name Type Description Default criteria Array A set of criteria, can be any operator defined in the query module ( Eq , In , Not , And ...) () Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases assigned to jdoe or are flagged and open query = Or ( Eq ( 'owner' , 'jdoe' ), And ( Eq ( 'status' , 'Open' ), Eq ( 'flag' , True ), ) ) produces { \"_or\" : [ { \"_field\" : \"owner\" , \"_value\" : \"jdoe\" }, { \"_and\" : [ [ { \"_field\" : \"status\" , \"_value\" : \"Open\" }, { \"_field\" : \"flag\" , \"_value\" : true } ] ] } ] } Parent ( tpe , criterion ) # A criterion used to search for records by filtering the parents using a criterion. For example search for observables of TLP:RED cases search for logs of tasks called 'Communication' Parameters: Name Type Description Default tpe str class name of the parent: case , case_task , case_artifact ... required criterion Any Any criterion defined by functions from the query module required Returns: Type Description dict JSON repsentation of the criterion # Query to search for tasks belonging to open cases with TLP=RED query = Parent ( 'case' , And ( Eq ( 'status' , 'Open' ), Eq ( 'tlp' , 3 ) )) produces { \"_parent\" : { \"_type\" : \"case\" , \"_query\" : { \"_and\" : [ [ { \"_field\" : \"status\" , \"_value\" : \"Open\" }, { \"_field\" : \"tlp\" , \"_value\" : 3 } ] ] } } } ParentId ( tpe , id ) # A criterion used to search for records by their parent's id. For example search for observables by case id search for tasks by case id search for logs by task id search for jobs by observable id Parameters: Name Type Description Default tpe str class name of the parent: case , case_task , case_artifact ... required id str the parent id's value required Returns: Type Description dict JSON repsentation of the criterion # Query to search for tasks of a case by id query = ParentId ( 'case' , '1234545643' ) produces { \"_parent\" : { \"_type\" : \"case\" , \"_id\" : \"1234545643\" } } StartsWith ( field , value ) # A criterion used to search for objects having a text field's value start with value . It's a wildcard operator that adds the * if not specified, at the end of value . For example: search for cases having a tag starting with malspam search for filename observables starting with dridex Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title stats with 'Communication' query = StartsWith ( 'title' , 'Communication' ) produces { \"_wildcard\" : { \"_field\" : \"title\" , \"_value\" : \"Communication*\" } } String ( query_string ) # A criterion used to search for objects using Elasticsearch querystring syntax. For example search for case using title:misp AND tlp:2 Parameters: Name Type Description Default tpe str object type's name as defined in TheHive: Possible values: all , case , case_task , case_task_log , case_artifact , alert , case_artifact_job , audit required Returns: Type Description dict JSON repsentation of the criterion # Query to search for casee with TLP:AMBER and having the word 'misp' on the title query = String ( 'title:misp AND tlp:2' ) produces { \"_string\" : \"title:misp AND tlp:2\" } Warning This criterion is deprecated and won't be ported to TheHive 4 Warning This criterion is available in TheHive 3 ONLY Type ( tpe ) # A criterion used to search for records of the type defined by tpe . For example search for objects of type 'audit' search for objects of type 'alert' Parameters: Name Type Description Default tpe str object type's name as defined in TheHive: all , case , case_task , case_task_log , case_artifact , alert , case_artifact_job , audit required Returns: Type Description dict JSON repsentation of the criterion # Query to search for alerts query = Type ( 'alert' ) produces { \"_type\" : \"alert\" }","title":"Query"},{"location":"reference/query/#query","text":"","title":"Query"},{"location":"reference/query/#thehive4py.query","text":"","title":"thehive4py.query"},{"location":"reference/query/#overview","text":"This is a module that defines a set of utility methods used to easily build valid search query without the need to use JSON objects. Query objects are used by APIs that allow searchinf for objects like: thehive4py.api.find_cases thehive4py.api.find_alerts thehive4py.api.find_tasks A query is a defined by on of the criteria described below. A query could be used like below: # Define the query query = And ( Eq ( 'owner' , 'admin' ), Between ( 'tlp' , 1 , 3 ), Not ( Eq ( 'status' , 'Deleted' )), Child ( 'case_artifact' , And ( Eq ( 'ioc' , True ), In ( 'dataType' , [ 'file' , 'ip' , 'domain' ]) )) ) # Call find_cases method to search for all the case, sorted by descending created date, # and verifying the following set of conditions: # - owned by admin # - having tlp between GREEN and RED # - not deleted # - having observables of type file, ip or domain that are flagged as IOC api . find_cases ( query = query , sort = [ '-createdAt' ], range = 'all' )","title":"Overview"},{"location":"reference/query/#thehive4py.query.And","text":"A criterion used to search for records that verfies all the specified criteria. For example search for observables flagged as IOC and having TLP <= 2 search for closed cases related to customFields.customer \"Company\" and having a WHITE tlp Parameters: Name Type Description Default criteria Array A set of criteria, can be any operator defined in the query module ( Eq , In , Not , And ...) () Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases with customer custom field set to 'Company', having a TLP less than Amber and are resolved query = And ( Eq ( 'customFields.customer.string' , 'Company' ), Lte ( 'tlp' , 2 ), Eq ( 'status' , 'Resolved' ) ) produces { \"_and\" : [ { \"_field\" : \"customFields.customer.string\" , \"_value\" : \"Company\" }, { \"_lte\" : { \"tlp\" : 2 } }, { \"_field\" : \"status\" , \"_value\" : \"Resolved\" } ] }","title":"And()"},{"location":"reference/query/#thehive4py.query.Between","text":"A criterion used to search for records having field 's value included in a range defined by from_value and to_value . This is an idea criterion to seahrch using date conditions. For example search for cases created between two dates search for alerts with cvss custom field greater that 2 and lesser than 9 Parameters: Name Type Description Default field str field name required from_value Number Lower limit of the range required to_value Number Higher limit of the range required Returns: Type Description dict JSON repsentation of the criterion # Query to search for alerts with cvss custom field greater that 2 and lesser than 9 query = Between ( 'customFields.cvss.float' , 2 , 9 ) produces { \"_between\" : { \"_field\" : \"customFields.cvss.float\" , \"_from\" : 2 , \"_to\" : 9 } }","title":"Between()"},{"location":"reference/query/#thehive4py.query.Child","text":"A criterion used to search for records by applying a filter on their children using a criterion. For example search for cases having file observables search for cases having a specific ip observable Parameters: Name Type Description Default tpe str class name of the child: case_task , case_artifact ... required criterion Any Any criterion defined by functions from the query module required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases having iocs of type file query = Child ( 'case_artifact' , And ( Eq ( 'dataType' , 'file' ), Eq ( 'ioc' , True ) )) produces { \"_child\" : { \"_type\" : \"case_artifact\" , \"_query\" : { \"_and\" : [ [ { \"_field\" : \"dataType\" , \"_value\" : \"file\" }, { \"_field\" : \"ioc\" , \"_value\" : true } ] ] } } }","title":"Child()"},{"location":"reference/query/#thehive4py.query.Contains","text":"A criterion used to search for records where field id defined. For example search for cases that have the custom field customer Parameters: Name Type Description Default field str field name required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases having a 'customer' custom field query = Contains ( 'customFields.customer' ) produces { \"_contains\" : \"customFields.customer\" }","title":"Contains()"},{"location":"reference/query/#thehive4py.query.ContainsString","text":"A criterion used to search for objects having a text field's value like the specified value . It's a wildcard operator that wraps the searched value with asteriscs. It operates the same way a the Like criterion For example: search for cases where title is like *malspam* search for observable where description contains the text *malware* Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title contains 'Communication' query = ContainsString ( 'title' , 'Communication' ) produces { \"_wildcard\" : { \"_field\" : \"title\" , \"_value\" : \"*Communication*\" } }","title":"ContainsString()"},{"location":"reference/query/#thehive4py.query.EndsWith","text":"A criterion used to search for objects having a text field's value end with value . It's a wildcard operator that adds the * if not specified, at the beginning of value . For example: search for filename observables ending with .exe Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title stats with 'Communication' query = EndsWith ( 'data' , '.png' ) produces { \"_wildcard\" : { \"_field\" : \"data\" , \"_value\" : \"*.png\" } }","title":"EndsWith()"},{"location":"reference/query/#thehive4py.query.Eq","text":"A criterion used to search for a equality. For example search for TLP = 2 search for flag = True search for title = 'Sample case' Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Eq ( 'tlp' , 3 ) produces { \"_field\" : \"tlp\" , \"_value\" : 3 }","title":"Eq()"},{"location":"reference/query/#thehive4py.query.Gt","text":"A criterion used to search for a field greater than a certain value. For example search for TLP > 2 search for customFields.cvss > 4.5 search for date > now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Gt ( 'tlp' , 1 ) produces { \"_gt\" : { \"tlp\" : 1 }}","title":"Gt()"},{"location":"reference/query/#thehive4py.query.Gte","text":"A criterion used to search for a field greater or equal than a certain value. For example search for TLP >= 2 search for customFields.cvss >= 4.5 search for date >= now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Gte ( 'tlp' , 1 ) produces { \"_gte\" : { \"tlp\" : 1 }}","title":"Gte()"},{"location":"reference/query/#thehive4py.query.Id","text":"A criterion used to search for records by id. For example search for a case by its id search for an alert by its id Parameters: Name Type Description Default id str the id's value required Returns: Type Description dict JSON repsentation of the criterion # Query to search for as case by id query = Id ( '1234545643' ) produces { \"_id\" : \"1234545643\" }","title":"Id()"},{"location":"reference/query/#thehive4py.query.In","text":"A criterion used to search for records where field has one of the values . For example search for observables of type domain, fqdn, ip search for cases tagged as malspam, or phising Parameters: Name Type Description Default field str field name required values Array A set of values the field must be in required Returns: Type Description dict JSON repsentation of the criterion # Query to search for observables of one of the following types: domain, fqdn, ip query = In ( 'dataType' , [ 'domain' , 'fqdn' , 'ip' ]) produces { \"_in\" : { \"_field\" : \"dataType\" , \"_values\" : [ \"domain\" , \"fqdn\" , \"ip\" ] } }","title":"In()"},{"location":"reference/query/#thehive4py.query.Like","text":"A criterion used to search for objects having a text field's value like the specified value . It's a wildcard operator when the searched value must specify asteriscs. For example: search for cases where title is like *malspam* search for observable where description contains the text *malware* Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title contains 'Communication' query = Like ( 'title' , '*Communication*' ) produces { \"_like\" : { \"_field\" : \"title\" , \"_value\" : \"*Communication*\" } } Note If the * are not specified, the exact same text will be searched for. Like('title', 'MISP') will search for titles equal to 'MISP'","title":"Like()"},{"location":"reference/query/#thehive4py.query.Lt","text":"A criterion used to search for a field less than a certain value. For example search for TLP < 2 search for customFields.cvss < 4.5 search for date < now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Lt ( 'tlp' , 3 ) produces { \"_lt\" : { \"tlp\" : 3 }}","title":"Lt()"},{"location":"reference/query/#thehive4py.query.Lte","text":"A criterion used to search for a field less or equal than a certain value. For example search for TLP <= 2 search for customFields.cvss <= 4.5 search for date <= now Parameters: Name Type Description Default field value field name required value Any field value required Returns: Type Description dict JSON repsentation of the criterion query = Lte ( 'tlp' , 3 ) produces { \"_lte\" : { \"tlp\" : 3 }}","title":"Lte()"},{"location":"reference/query/#thehive4py.query.Not","text":"A criterion used to search for records that verfies the opposite of the specified criterion. For example search for observables not marked as ioc search for cases not having a MISP tag Parameters: Name Type Description Default crietrion Any The base criterion to use for negation required Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases assigned to jdoe or are flagged and open query = Not ( Eq ( 'ioc' , True )) produces { \"_not\" : { \"_field\" : \"ioc\" , \"_value\" : false } }","title":"Not()"},{"location":"reference/query/#thehive4py.query.Or","text":"A criterion used to search for records that verfies one of the specified criteria. For example search for observables of type domain or fqdn search for cases assigned to a given user or have a specific tag Parameters: Name Type Description Default criteria Array A set of criteria, can be any operator defined in the query module ( Eq , In , Not , And ...) () Returns: Type Description dict JSON repsentation of the criterion # Query to search for cases assigned to jdoe or are flagged and open query = Or ( Eq ( 'owner' , 'jdoe' ), And ( Eq ( 'status' , 'Open' ), Eq ( 'flag' , True ), ) ) produces { \"_or\" : [ { \"_field\" : \"owner\" , \"_value\" : \"jdoe\" }, { \"_and\" : [ [ { \"_field\" : \"status\" , \"_value\" : \"Open\" }, { \"_field\" : \"flag\" , \"_value\" : true } ] ] } ] }","title":"Or()"},{"location":"reference/query/#thehive4py.query.Parent","text":"A criterion used to search for records by filtering the parents using a criterion. For example search for observables of TLP:RED cases search for logs of tasks called 'Communication' Parameters: Name Type Description Default tpe str class name of the parent: case , case_task , case_artifact ... required criterion Any Any criterion defined by functions from the query module required Returns: Type Description dict JSON repsentation of the criterion # Query to search for tasks belonging to open cases with TLP=RED query = Parent ( 'case' , And ( Eq ( 'status' , 'Open' ), Eq ( 'tlp' , 3 ) )) produces { \"_parent\" : { \"_type\" : \"case\" , \"_query\" : { \"_and\" : [ [ { \"_field\" : \"status\" , \"_value\" : \"Open\" }, { \"_field\" : \"tlp\" , \"_value\" : 3 } ] ] } } }","title":"Parent()"},{"location":"reference/query/#thehive4py.query.ParentId","text":"A criterion used to search for records by their parent's id. For example search for observables by case id search for tasks by case id search for logs by task id search for jobs by observable id Parameters: Name Type Description Default tpe str class name of the parent: case , case_task , case_artifact ... required id str the parent id's value required Returns: Type Description dict JSON repsentation of the criterion # Query to search for tasks of a case by id query = ParentId ( 'case' , '1234545643' ) produces { \"_parent\" : { \"_type\" : \"case\" , \"_id\" : \"1234545643\" } }","title":"ParentId()"},{"location":"reference/query/#thehive4py.query.StartsWith","text":"A criterion used to search for objects having a text field's value start with value . It's a wildcard operator that adds the * if not specified, at the end of value . For example: search for cases having a tag starting with malspam search for filename observables starting with dridex Parameters: Name Type Description Default field value field name required value Any searched value required Returns: Type Description dict JSON repsentation of the criterion # Search for tasks where title stats with 'Communication' query = StartsWith ( 'title' , 'Communication' ) produces { \"_wildcard\" : { \"_field\" : \"title\" , \"_value\" : \"Communication*\" } }","title":"StartsWith()"},{"location":"reference/query/#thehive4py.query.String","text":"A criterion used to search for objects using Elasticsearch querystring syntax. For example search for case using title:misp AND tlp:2 Parameters: Name Type Description Default tpe str object type's name as defined in TheHive: Possible values: all , case , case_task , case_task_log , case_artifact , alert , case_artifact_job , audit required Returns: Type Description dict JSON repsentation of the criterion # Query to search for casee with TLP:AMBER and having the word 'misp' on the title query = String ( 'title:misp AND tlp:2' ) produces { \"_string\" : \"title:misp AND tlp:2\" } Warning This criterion is deprecated and won't be ported to TheHive 4 Warning This criterion is available in TheHive 3 ONLY","title":"String()"},{"location":"reference/query/#thehive4py.query.Type","text":"A criterion used to search for records of the type defined by tpe . For example search for objects of type 'audit' search for objects of type 'alert' Parameters: Name Type Description Default tpe str object type's name as defined in TheHive: all , case , case_task , case_task_log , case_artifact , alert , case_artifact_job , audit required Returns: Type Description dict JSON repsentation of the criterion # Query to search for alerts query = Type ( 'alert' ) produces { \"_type\" : \"alert\" }","title":"Type()"},{"location":"samples/admin-operations/","text":"Missing TODO","title":"Admin operations"},{"location":"samples/alert-operations/","text":"Create alert # An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Prepare observables inmemory_file = open ( 'sample.txt' , 'rb' ) artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = ( inmemory_file , 'sample.txt' ), sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) inmemory_file . close () # Exit the program sys . exit ( 0 ) Get an Alert by ID # Get an alert identified by ALERT_ID and display its title from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . get_alert ( ALERT_ID ) # Print alert title alert_data = response . json () print ( alert_data . get ( 'title' )) Update alert # Update an existing alert from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . get_alert ( ALERT_ID ) # Update description alert_data = response . json () alert_data [ 'description' ] = 'Updated alert desciption...' # Update alert api . update_alert ( alert = Alert ( json = alert_data ), alert_id = ALERT_ID , fields = [ 'description' ]) Search alerts # Search for alerts with HIGH severity, AMBER TLP and with a title containing MALSPAM import json from thehive4py.api import TheHiveApi from thehive4py.models import * from thehive4py.query import * THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) query = And ( Eq ( 'tlp' , Tlp . AMBER . value ), Eq ( 'severity' , Severity . HIGH . value ), Like ( 'title' , '*MALSPAM*' ) ) response = api . find_alerts ( query = query ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) Promote an alert # Promote an alert identified by ALERT_ID to a case, using a case template named MALSPAM from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . promote_alert_to_case ( ALERT_ID , case_template = 'MALSPAM' ) Create an Alert Artifact # Create and add an artifact to an existing alert identified by ALERT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi from thehive4py.models import Tlp THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Instanciate a new domain artifact artifact = AlertArtifact ( dataType = 'domain' , data = 'malicious-domain.tld' , ignoreSimilarity = True , ioc = True ) api . create_alert_artifact ( ALERT_ID , artifact ) # Instanciate a new file artifact artifact = AlertArtifact ( dataType = 'file' , data = 'malicious-file.exe' , ignoreSimilarity = False , ioc = True , sighted = True , tlp = Tlp . RED . value ) api . create_alert_artifact ( alert_id , artifact ) Update an Alert Artifact # Update an existing artifact identified by ALERT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi from thehive4py.models import Tlp THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Create a new domain artifact artifact = AlertArtifact ( dataType = 'domain' , data = 'malicious-domain.tld' , ignoreSimilarity = True , ioc = True ) response = api . create_alert_artifact ( ALERT_ID , artifact ) # Update its tlp, sighted and ignoreSimilarity flags artifact_data = response . json ()[ 0 ] artifact_data [ 'tlp' ] = Tlp . RED . value artifact_data [ 'sighted' ] = True artifact_data [ 'ignoreSimilarity' ] = False new_artifact = AlertArtifact ( json = artifact_data ) api . update_alert_artifact ( artifact_data [ 'id' ], new_artifact , fields = [ 'tlp' , 'ioc' , 'ignoreSimilarity' ]) Delete an Alert Artifact # Delete an existing alert artifact identified by ARTIFACT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Delete alert artifact api . delete_alert_artifact ( ARTIFACT_ID )","title":"Alert operations"},{"location":"samples/alert-operations/#create-alert","text":"An example showing how to create an alert with observables and custom fields. import requests import sys import json import time import uuid from thehive4py.api import TheHiveApi from thehive4py.models import Alert , AlertArtifact , CustomFieldHelper THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Prepare observables inmemory_file = open ( 'sample.txt' , 'rb' ) artifacts = [ AlertArtifact ( dataType = 'ip' , data = '8.8.8.8' ), AlertArtifact ( dataType = 'domain' , data = 'google.com' ), AlertArtifact ( dataType = 'file' , data = 'pic.png' ), AlertArtifact ( dataType = 'file' , data = ( inmemory_file , 'sample.txt' ), sighted = True , ioc = True ) ] # Prepare custom fields customFields = CustomFieldHelper () \\ . add_string ( 'business-unit' , 'HR' ) \\ . add_string ( 'business-impact' , 'HIGH' ) \\ . add_date ( 'occur-date' , int ( time . time ()) * 1000 ) \\ . add_number ( 'cvss' , 6 ) \\ . build () # Prepare the sample Alert sourceRef = str ( uuid . uuid4 ())[ 0 : 6 ] alert = Alert ( title = 'New Alert' , tlp = 3 , tags = [ 'TheHive4Py' , 'sample' ], description = 'N/A' , type = 'external' , source = 'instance1' , sourceRef = sourceRef , artifacts = artifacts , customFields = customFields ) # Create the alert try : response = api . create_alert ( alert ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True )) except AlertException as e : print ( \"Alert create error: {} \" . format ( e )) inmemory_file . close () # Exit the program sys . exit ( 0 )","title":"Create alert"},{"location":"samples/alert-operations/#get-an-alert-by-id","text":"Get an alert identified by ALERT_ID and display its title from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . get_alert ( ALERT_ID ) # Print alert title alert_data = response . json () print ( alert_data . get ( 'title' ))","title":"Get an Alert by ID"},{"location":"samples/alert-operations/#update-alert","text":"Update an existing alert from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . get_alert ( ALERT_ID ) # Update description alert_data = response . json () alert_data [ 'description' ] = 'Updated alert desciption...' # Update alert api . update_alert ( alert = Alert ( json = alert_data ), alert_id = ALERT_ID , fields = [ 'description' ])","title":"Update alert"},{"location":"samples/alert-operations/#search-alerts","text":"Search for alerts with HIGH severity, AMBER TLP and with a title containing MALSPAM import json from thehive4py.api import TheHiveApi from thehive4py.models import * from thehive4py.query import * THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) query = And ( Eq ( 'tlp' , Tlp . AMBER . value ), Eq ( 'severity' , Severity . HIGH . value ), Like ( 'title' , '*MALSPAM*' ) ) response = api . find_alerts ( query = query ) # Print the JSON response print ( json . dumps ( response . json (), indent = 4 , sort_keys = True ))","title":"Search alerts"},{"location":"samples/alert-operations/#promote-an-alert","text":"Promote an alert identified by ALERT_ID to a case, using a case template named MALSPAM from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) response = api . promote_alert_to_case ( ALERT_ID , case_template = 'MALSPAM' )","title":"Promote an alert"},{"location":"samples/alert-operations/#create-an-alert-artifact","text":"Create and add an artifact to an existing alert identified by ALERT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi from thehive4py.models import Tlp THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Instanciate a new domain artifact artifact = AlertArtifact ( dataType = 'domain' , data = 'malicious-domain.tld' , ignoreSimilarity = True , ioc = True ) api . create_alert_artifact ( ALERT_ID , artifact ) # Instanciate a new file artifact artifact = AlertArtifact ( dataType = 'file' , data = 'malicious-file.exe' , ignoreSimilarity = False , ioc = True , sighted = True , tlp = Tlp . RED . value ) api . create_alert_artifact ( alert_id , artifact )","title":"Create an Alert Artifact"},{"location":"samples/alert-operations/#update-an-alert-artifact","text":"Update an existing artifact identified by ALERT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi from thehive4py.models import Tlp THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Create a new domain artifact artifact = AlertArtifact ( dataType = 'domain' , data = 'malicious-domain.tld' , ignoreSimilarity = True , ioc = True ) response = api . create_alert_artifact ( ALERT_ID , artifact ) # Update its tlp, sighted and ignoreSimilarity flags artifact_data = response . json ()[ 0 ] artifact_data [ 'tlp' ] = Tlp . RED . value artifact_data [ 'sighted' ] = True artifact_data [ 'ignoreSimilarity' ] = False new_artifact = AlertArtifact ( json = artifact_data ) api . update_alert_artifact ( artifact_data [ 'id' ], new_artifact , fields = [ 'tlp' , 'ioc' , 'ignoreSimilarity' ])","title":"Update an Alert Artifact"},{"location":"samples/alert-operations/#delete-an-alert-artifact","text":"Delete an existing alert artifact identified by ARTIFACT_ID Warning This function is available in TheHive 4 ONLY from thehive4py.api import TheHiveApi THEHIVE_URL = 'http://127.0.0.1:9000' THEHIVE_API_KEY = '**YOUR_API_KEY**' api = TheHiveApi ( THEHIVE_URL , THEHIVE_API_KEY ) # Delete alert artifact api . delete_alert_artifact ( ARTIFACT_ID )","title":"Delete an Alert Artifact"},{"location":"samples/case-operations/","text":"Create a case # Missing TODO Get a case by ID # Missing TODO Find a case using few criteria # Missing TODO Search for cases # Missing TODO Update a case # Missing TODO Search cases by observable # Missing TODO Close a case # Missing TODO","title":"Case operations"},{"location":"samples/case-operations/#create-a-case","text":"Missing TODO","title":"Create a case"},{"location":"samples/case-operations/#get-a-case-by-id","text":"Missing TODO","title":"Get a case by ID"},{"location":"samples/case-operations/#find-a-case-using-few-criteria","text":"Missing TODO","title":"Find a case using few criteria"},{"location":"samples/case-operations/#search-for-cases","text":"Missing TODO","title":"Search for cases"},{"location":"samples/case-operations/#update-a-case","text":"Missing TODO","title":"Update a case"},{"location":"samples/case-operations/#search-cases-by-observable","text":"Missing TODO","title":"Search cases by observable"},{"location":"samples/case-operations/#close-a-case","text":"Missing TODO","title":"Close a case"},{"location":"samples/observable-operations/","text":"Observable operations # Create a file observable # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Init the CaseObservable object file_observable = CaseObservable ( dataType = 'file' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , file_observable ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 ) Create a domain observable # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Init the CaseObservable object domain = CaseObservable ( dataType = 'filename' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , domain ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 ) Get all observables of a given case # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Call the API response = api . get_case_observables ( CASE_ID , query = {}, sort = [ '-startDate' , '+ioc' ], range = 'all' ) # Display the result if response . status_code == 200 : # Get response data list = response . json () # Display response data print ( json . dumps ( list , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 ) Search ip observables of a given case # import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable from thehive4py.query import Eq , And api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Build query query = And ( Eq ( 'dataType' , 'ip' ), Eq ( 'ioc' , True )) # Call the API to search all case's ip observables marked as IOC, sort them by descending startDate response = api . get_case_observables ( CASE_ID , query = query , sort = [ '-startDate' ], range = 'all' ) # Display the result if response . status_code == 200 : # Get response data list = response . json () # Display response data print ( json . dumps ( list , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Observable operations"},{"location":"samples/observable-operations/#observable-operations","text":"","title":"Observable operations"},{"location":"samples/observable-operations/#create-a-file-observable","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Init the CaseObservable object file_observable = CaseObservable ( dataType = 'file' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , file_observable ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Create a file observable"},{"location":"samples/observable-operations/#create-a-domain-observable","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Init the CaseObservable object domain = CaseObservable ( dataType = 'filename' , data = [ 'pic.png' ], tlp = 1 , ioc = True , sighted = True , tags = [ 'thehive4py' ], message = 'test' ) # Call the API response = api . create_case_observable ( CASE_ID , domain ) # Display the result if response . status_code == 201 : # Get response data observableJson = response . json () # Display response data print ( json . dumps ( observableJson , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Create a domain observable"},{"location":"samples/observable-operations/#get-all-observables-of-a-given-case","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Call the API response = api . get_case_observables ( CASE_ID , query = {}, sort = [ '-startDate' , '+ioc' ], range = 'all' ) # Display the result if response . status_code == 200 : # Get response data list = response . json () # Display response data print ( json . dumps ( list , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Get all observables of a given case"},{"location":"samples/observable-operations/#search-ip-observables-of-a-given-case","text":"import sys import json from thehive4py.api import TheHiveApi from thehive4py.models import CaseObservable from thehive4py.query import Eq , And api = TheHiveApi ( 'http://127.0.0.1:9000' , '**YOUR_API_KEY**' ) # Build query query = And ( Eq ( 'dataType' , 'ip' ), Eq ( 'ioc' , True )) # Call the API to search all case's ip observables marked as IOC, sort them by descending startDate response = api . get_case_observables ( CASE_ID , query = query , sort = [ '-startDate' ], range = 'all' ) # Display the result if response . status_code == 200 : # Get response data list = response . json () # Display response data print ( json . dumps ( list , indent = 4 , sort_keys = True )) else : print ( 'Failure: {} / {} ' . format ( response . status_code , response . text )) sys . exit ( 0 )","title":"Search ip observables of a given case"},{"location":"samples/task-operations/","text":"Missing TODO","title":"Task operations"}]}